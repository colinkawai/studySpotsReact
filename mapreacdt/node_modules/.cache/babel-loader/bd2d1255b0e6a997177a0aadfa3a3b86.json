{"ast":null,"code":"// Older browsers don't support event options, feature detect it.\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\nlet hasPassiveEvents = false;\n\nif (typeof window !== 'undefined') {\n  const passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true;\n      return undefined;\n    }\n\n  };\n  window.addEventListener('testPassive', null, passiveTestOptions);\n  window.removeEventListener('testPassive', null, passiveTestOptions);\n}\n\nconst isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\nlet locks = [];\nlet documentListenerAdded = false;\nlet initialClientY = -1;\nlet previousBodyOverflowSetting;\nlet previousBodyPaddingRight; // returns true if `el` should be allowed to receive touchmove events.\n\nconst allowTouchMove = el => locks.some(lock => {\n  if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n    return true;\n  }\n\n  return false;\n});\n\nconst preventDefault = rawEvent => {\n  const e = rawEvent || window.event; // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n\n  if (allowTouchMove(e.target)) {\n    return true;\n  } // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n\n\n  if (e.touches.length > 1) return true;\n  if (e.preventDefault) e.preventDefault();\n  return false;\n};\n\nconst setOverflowHidden = options => {\n  // Setting overflow on body/documentElement synchronously in Desktop Safari slows down\n  // the responsiveness for some reason. Setting within a setTimeout fixes this.\n  setTimeout(() => {\n    // If previousBodyPaddingRight is already set, don't set it again.\n    if (previousBodyPaddingRight === undefined) {\n      const reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n      const scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n\n      if (reserveScrollBarGap && scrollBarGap > 0) {\n        previousBodyPaddingRight = document.body.style.paddingRight;\n        document.body.style.paddingRight = `${scrollBarGap}px`;\n      }\n    } // If previousBodyOverflowSetting is already set, don't set it again.\n\n\n    if (previousBodyOverflowSetting === undefined) {\n      previousBodyOverflowSetting = document.body.style.overflow;\n      document.body.style.overflow = 'hidden';\n    }\n  });\n};\n\nconst restoreOverflowSetting = () => {\n  // Setting overflow on body/documentElement synchronously in Desktop Safari slows down\n  // the responsiveness for some reason. Setting within a setTimeout fixes this.\n  setTimeout(() => {\n    if (previousBodyPaddingRight !== undefined) {\n      document.body.style.paddingRight = previousBodyPaddingRight; // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n      // can be set again.\n\n      previousBodyPaddingRight = undefined;\n    }\n\n    if (previousBodyOverflowSetting !== undefined) {\n      document.body.style.overflow = previousBodyOverflowSetting; // Restore previousBodyOverflowSetting to undefined\n      // so setOverflowHidden knows it can be set again.\n\n      previousBodyOverflowSetting = undefined;\n    }\n  });\n}; // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\n\n\nconst isTargetElementTotallyScrolled = targetElement => targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n\nconst handleScroll = (event, targetElement) => {\n  const clientY = event.targetTouches[0].clientY - initialClientY;\n\n  if (allowTouchMove(event.target)) {\n    return false;\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event);\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event);\n  }\n\n  event.stopPropagation();\n  return true;\n};\n\nexport const disableBodyScroll = (targetElement, options) => {\n  if (isIosDevice) {\n    // targetElement must be provided, and disableBodyScroll must not have been\n    // called on this targetElement before.\n    if (!targetElement) {\n      // eslint-disable-next-line no-console\n      console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');\n      return;\n    }\n\n    if (targetElement && !locks.some(lock => lock.targetElement === targetElement)) {\n      const lock = {\n        targetElement,\n        options: options || {}\n      };\n      locks = [...locks, lock];\n\n      targetElement.ontouchstart = event => {\n        if (event.targetTouches.length === 1) {\n          // detect single touch.\n          initialClientY = event.targetTouches[0].clientY;\n        }\n      };\n\n      targetElement.ontouchmove = event => {\n        if (event.targetTouches.length === 1) {\n          // detect single touch.\n          handleScroll(event, targetElement);\n        }\n      };\n\n      if (!documentListenerAdded) {\n        document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? {\n          passive: false\n        } : undefined);\n        documentListenerAdded = true;\n      }\n    }\n  } else {\n    setOverflowHidden(options);\n    const lock = {\n      targetElement,\n      options: options || {}\n    };\n    locks = [...locks, lock];\n  }\n};\nexport const clearAllBodyScrollLocks = () => {\n  if (isIosDevice) {\n    // Clear all locks ontouchstart/ontouchmove handlers, and the references.\n    locks.forEach(lock => {\n      lock.targetElement.ontouchstart = null;\n      lock.targetElement.ontouchmove = null;\n    });\n\n    if (documentListenerAdded) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? {\n        passive: false\n      } : undefined);\n      documentListenerAdded = false;\n    }\n\n    locks = []; // Reset initial clientY.\n\n    initialClientY = -1;\n  } else {\n    restoreOverflowSetting();\n    locks = [];\n  }\n};\nexport const enableBodyScroll = targetElement => {\n  if (isIosDevice) {\n    if (!targetElement) {\n      // eslint-disable-next-line no-console\n      console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');\n      return;\n    }\n\n    targetElement.ontouchstart = null;\n    targetElement.ontouchmove = null;\n    locks = locks.filter(lock => lock.targetElement !== targetElement);\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? {\n        passive: false\n      } : undefined);\n      documentListenerAdded = false;\n    }\n  } else {\n    locks = locks.filter(lock => lock.targetElement !== targetElement);\n\n    if (!locks.length) {\n      restoreOverflowSetting();\n    }\n  }\n};","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/node_modules/body-scroll-lock/lib/bodyScrollLock.es6.js"],"names":["hasPassiveEvents","window","passiveTestOptions","passive","undefined","addEventListener","removeEventListener","isIosDevice","navigator","platform","test","maxTouchPoints","locks","documentListenerAdded","initialClientY","previousBodyOverflowSetting","previousBodyPaddingRight","allowTouchMove","el","some","lock","options","preventDefault","rawEvent","e","event","target","touches","length","setOverflowHidden","setTimeout","reserveScrollBarGap","scrollBarGap","innerWidth","document","documentElement","clientWidth","body","style","paddingRight","overflow","restoreOverflowSetting","isTargetElementTotallyScrolled","targetElement","scrollHeight","scrollTop","clientHeight","handleScroll","clientY","targetTouches","stopPropagation","disableBodyScroll","console","error","ontouchstart","ontouchmove","clearAllBodyScrollLocks","forEach","enableBodyScroll","filter"],"mappings":"AAEA;AAEA;AACA;AAEA,IAAIA,gBAAgB,GAAG,KAAvB;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAMC,kBAAkB,GAAG;AACzB,QAAIC,OAAJ,GAAc;AACZH,MAAAA,gBAAgB,GAAG,IAAnB;AACA,aAAOI,SAAP;AACD;;AAJwB,GAA3B;AAMAH,EAAAA,MAAM,CAACI,gBAAP,CAAwB,aAAxB,EAAuC,IAAvC,EAA6CH,kBAA7C;AACAD,EAAAA,MAAM,CAACK,mBAAP,CAA2B,aAA3B,EAA0C,IAA1C,EAAgDJ,kBAAhD;AACD;;AAED,MAAMK,WAAW,GAAG,OAAON,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACO,SAAxC,IAAqDP,MAAM,CAACO,SAAP,CAAiBC,QAAtE,KAAmF,iBAAiBC,IAAjB,CAAsBT,MAAM,CAACO,SAAP,CAAiBC,QAAvC,KAAoDR,MAAM,CAACO,SAAP,CAAiBC,QAAjB,KAA8B,UAA9B,IAA4CR,MAAM,CAACO,SAAP,CAAiBG,cAAjB,GAAkC,CAArN,CAApB;AAGA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,qBAAqB,GAAG,KAA5B;AACA,IAAIC,cAAc,GAAG,CAAC,CAAtB;AACA,IAAIC,2BAAJ;AACA,IAAIC,wBAAJ,C,CAEA;;AACA,MAAMC,cAAc,GAAGC,EAAE,IAAIN,KAAK,CAACO,IAAN,CAAWC,IAAI,IAAI;AAC9C,MAAIA,IAAI,CAACC,OAAL,CAAaJ,cAAb,IAA+BG,IAAI,CAACC,OAAL,CAAaJ,cAAb,CAA4BC,EAA5B,CAAnC,EAAoE;AAClE,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CAN4B,CAA7B;;AAQA,MAAMI,cAAc,GAAGC,QAAQ,IAAI;AACjC,QAAMC,CAAC,GAAGD,QAAQ,IAAItB,MAAM,CAACwB,KAA7B,CADiC,CAGjC;AACA;AACA;AACA;;AACA,MAAIR,cAAc,CAACO,CAAC,CAACE,MAAH,CAAlB,EAA8B;AAC5B,WAAO,IAAP;AACD,GATgC,CAWjC;;;AACA,MAAIF,CAAC,CAACG,OAAF,CAAUC,MAAV,GAAmB,CAAvB,EAA0B,OAAO,IAAP;AAE1B,MAAIJ,CAAC,CAACF,cAAN,EAAsBE,CAAC,CAACF,cAAF;AAEtB,SAAO,KAAP;AACD,CAjBD;;AAmBA,MAAMO,iBAAiB,GAAGR,OAAO,IAAI;AACnC;AACA;AACAS,EAAAA,UAAU,CAAC,MAAM;AACf;AACA,QAAId,wBAAwB,KAAKZ,SAAjC,EAA4C;AAC1C,YAAM2B,mBAAmB,GAAG,CAAC,CAACV,OAAF,IAAaA,OAAO,CAACU,mBAAR,KAAgC,IAAzE;AACA,YAAMC,YAAY,GAAG/B,MAAM,CAACgC,UAAP,GAAoBC,QAAQ,CAACC,eAAT,CAAyBC,WAAlE;;AAEA,UAAIL,mBAAmB,IAAIC,YAAY,GAAG,CAA1C,EAA6C;AAC3ChB,QAAAA,wBAAwB,GAAGkB,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,YAA/C;AACAL,QAAAA,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,YAApB,GAAoC,GAAEP,YAAa,IAAnD;AACD;AACF,KAVc,CAYf;;;AACA,QAAIjB,2BAA2B,KAAKX,SAApC,EAA+C;AAC7CW,MAAAA,2BAA2B,GAAGmB,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBE,QAAlD;AACAN,MAAAA,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBE,QAApB,GAA+B,QAA/B;AACD;AACF,GAjBS,CAAV;AAkBD,CArBD;;AAuBA,MAAMC,sBAAsB,GAAG,MAAM;AACnC;AACA;AACAX,EAAAA,UAAU,CAAC,MAAM;AACf,QAAId,wBAAwB,KAAKZ,SAAjC,EAA4C;AAC1C8B,MAAAA,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,YAApB,GAAmCvB,wBAAnC,CAD0C,CAG1C;AACA;;AACAA,MAAAA,wBAAwB,GAAGZ,SAA3B;AACD;;AAED,QAAIW,2BAA2B,KAAKX,SAApC,EAA+C;AAC7C8B,MAAAA,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBE,QAApB,GAA+BzB,2BAA/B,CAD6C,CAG7C;AACA;;AACAA,MAAAA,2BAA2B,GAAGX,SAA9B;AACD;AACF,GAhBS,CAAV;AAiBD,CApBD,C,CAsBA;;;AACA,MAAMsC,8BAA8B,GAAGC,aAAa,IAAIA,aAAa,GAAGA,aAAa,CAACC,YAAd,GAA6BD,aAAa,CAACE,SAA3C,IAAwDF,aAAa,CAACG,YAAzE,GAAwF,KAA7J;;AAEA,MAAMC,YAAY,GAAG,CAACtB,KAAD,EAAQkB,aAAR,KAA0B;AAC7C,QAAMK,OAAO,GAAGvB,KAAK,CAACwB,aAAN,CAAoB,CAApB,EAAuBD,OAAvB,GAAiClC,cAAjD;;AAEA,MAAIG,cAAc,CAACQ,KAAK,CAACC,MAAP,CAAlB,EAAkC;AAChC,WAAO,KAAP;AACD;;AAED,MAAIiB,aAAa,IAAIA,aAAa,CAACE,SAAd,KAA4B,CAA7C,IAAkDG,OAAO,GAAG,CAAhE,EAAmE;AACjE;AACA,WAAO1B,cAAc,CAACG,KAAD,CAArB;AACD;;AAED,MAAIiB,8BAA8B,CAACC,aAAD,CAA9B,IAAiDK,OAAO,GAAG,CAA/D,EAAkE;AAChE;AACA,WAAO1B,cAAc,CAACG,KAAD,CAArB;AACD;;AAEDA,EAAAA,KAAK,CAACyB,eAAN;AACA,SAAO,IAAP;AACD,CAnBD;;AAqBA,OAAO,MAAMC,iBAAiB,GAAG,CAACR,aAAD,EAAgBtB,OAAhB,KAA4B;AAC3D,MAAId,WAAJ,EAAiB;AACf;AACA;AACA,QAAI,CAACoC,aAAL,EAAoB;AAClB;AACAS,MAAAA,OAAO,CAACC,KAAR,CAAc,gHAAd;AACA;AACD;;AAED,QAAIV,aAAa,IAAI,CAAC/B,KAAK,CAACO,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACuB,aAAL,KAAuBA,aAA1C,CAAtB,EAAgF;AAC9E,YAAMvB,IAAI,GAAG;AACXuB,QAAAA,aADW;AAEXtB,QAAAA,OAAO,EAAEA,OAAO,IAAI;AAFT,OAAb;AAKAT,MAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAWQ,IAAX,CAAR;;AAEAuB,MAAAA,aAAa,CAACW,YAAd,GAA6B7B,KAAK,IAAI;AACpC,YAAIA,KAAK,CAACwB,aAAN,CAAoBrB,MAApB,KAA+B,CAAnC,EAAsC;AACpC;AACAd,UAAAA,cAAc,GAAGW,KAAK,CAACwB,aAAN,CAAoB,CAApB,EAAuBD,OAAxC;AACD;AACF,OALD;;AAMAL,MAAAA,aAAa,CAACY,WAAd,GAA4B9B,KAAK,IAAI;AACnC,YAAIA,KAAK,CAACwB,aAAN,CAAoBrB,MAApB,KAA+B,CAAnC,EAAsC;AACpC;AACAmB,UAAAA,YAAY,CAACtB,KAAD,EAAQkB,aAAR,CAAZ;AACD;AACF,OALD;;AAOA,UAAI,CAAC9B,qBAAL,EAA4B;AAC1BqB,QAAAA,QAAQ,CAAC7B,gBAAT,CAA0B,WAA1B,EAAuCiB,cAAvC,EAAuDtB,gBAAgB,GAAG;AAAEG,UAAAA,OAAO,EAAE;AAAX,SAAH,GAAwBC,SAA/F;AACAS,QAAAA,qBAAqB,GAAG,IAAxB;AACD;AACF;AACF,GAnCD,MAmCO;AACLgB,IAAAA,iBAAiB,CAACR,OAAD,CAAjB;AACA,UAAMD,IAAI,GAAG;AACXuB,MAAAA,aADW;AAEXtB,MAAAA,OAAO,EAAEA,OAAO,IAAI;AAFT,KAAb;AAKAT,IAAAA,KAAK,GAAG,CAAC,GAAGA,KAAJ,EAAWQ,IAAX,CAAR;AACD;AACF,CA7CM;AA+CP,OAAO,MAAMoC,uBAAuB,GAAG,MAAM;AAC3C,MAAIjD,WAAJ,EAAiB;AACf;AACAK,IAAAA,KAAK,CAAC6C,OAAN,CAAcrC,IAAI,IAAI;AACpBA,MAAAA,IAAI,CAACuB,aAAL,CAAmBW,YAAnB,GAAkC,IAAlC;AACAlC,MAAAA,IAAI,CAACuB,aAAL,CAAmBY,WAAnB,GAAiC,IAAjC;AACD,KAHD;;AAKA,QAAI1C,qBAAJ,EAA2B;AACzBqB,MAAAA,QAAQ,CAAC5B,mBAAT,CAA6B,WAA7B,EAA0CgB,cAA1C,EAA0DtB,gBAAgB,GAAG;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAAH,GAAwBC,SAAlG;AACAS,MAAAA,qBAAqB,GAAG,KAAxB;AACD;;AAEDD,IAAAA,KAAK,GAAG,EAAR,CAZe,CAcf;;AACAE,IAAAA,cAAc,GAAG,CAAC,CAAlB;AACD,GAhBD,MAgBO;AACL2B,IAAAA,sBAAsB;AACtB7B,IAAAA,KAAK,GAAG,EAAR;AACD;AACF,CArBM;AAuBP,OAAO,MAAM8C,gBAAgB,GAAGf,aAAa,IAAI;AAC/C,MAAIpC,WAAJ,EAAiB;AACf,QAAI,CAACoC,aAAL,EAAoB;AAClB;AACAS,MAAAA,OAAO,CAACC,KAAR,CAAc,8GAAd;AACA;AACD;;AAEDV,IAAAA,aAAa,CAACW,YAAd,GAA6B,IAA7B;AACAX,IAAAA,aAAa,CAACY,WAAd,GAA4B,IAA5B;AAEA3C,IAAAA,KAAK,GAAGA,KAAK,CAAC+C,MAAN,CAAavC,IAAI,IAAIA,IAAI,CAACuB,aAAL,KAAuBA,aAA5C,CAAR;;AAEA,QAAI9B,qBAAqB,IAAID,KAAK,CAACgB,MAAN,KAAiB,CAA9C,EAAiD;AAC/CM,MAAAA,QAAQ,CAAC5B,mBAAT,CAA6B,WAA7B,EAA0CgB,cAA1C,EAA0DtB,gBAAgB,GAAG;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAAH,GAAwBC,SAAlG;AAEAS,MAAAA,qBAAqB,GAAG,KAAxB;AACD;AACF,GAjBD,MAiBO;AACLD,IAAAA,KAAK,GAAGA,KAAK,CAAC+C,MAAN,CAAavC,IAAI,IAAIA,IAAI,CAACuB,aAAL,KAAuBA,aAA5C,CAAR;;AACA,QAAI,CAAC/B,KAAK,CAACgB,MAAX,EAAmB;AACjBa,MAAAA,sBAAsB;AACvB;AACF;AACF,CAxBM","sourcesContent":["\n\n// Older browsers don't support event options, feature detect it.\n\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\n\nlet hasPassiveEvents = false;\nif (typeof window !== 'undefined') {\n  const passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true;\n      return undefined;\n    }\n  };\n  window.addEventListener('testPassive', null, passiveTestOptions);\n  window.removeEventListener('testPassive', null, passiveTestOptions);\n}\n\nconst isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\n\n\nlet locks = [];\nlet documentListenerAdded = false;\nlet initialClientY = -1;\nlet previousBodyOverflowSetting;\nlet previousBodyPaddingRight;\n\n// returns true if `el` should be allowed to receive touchmove events.\nconst allowTouchMove = el => locks.some(lock => {\n  if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n    return true;\n  }\n\n  return false;\n});\n\nconst preventDefault = rawEvent => {\n  const e = rawEvent || window.event;\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true;\n  }\n\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true;\n\n  if (e.preventDefault) e.preventDefault();\n\n  return false;\n};\n\nconst setOverflowHidden = options => {\n  // Setting overflow on body/documentElement synchronously in Desktop Safari slows down\n  // the responsiveness for some reason. Setting within a setTimeout fixes this.\n  setTimeout(() => {\n    // If previousBodyPaddingRight is already set, don't set it again.\n    if (previousBodyPaddingRight === undefined) {\n      const reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n      const scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n\n      if (reserveScrollBarGap && scrollBarGap > 0) {\n        previousBodyPaddingRight = document.body.style.paddingRight;\n        document.body.style.paddingRight = `${scrollBarGap}px`;\n      }\n    }\n\n    // If previousBodyOverflowSetting is already set, don't set it again.\n    if (previousBodyOverflowSetting === undefined) {\n      previousBodyOverflowSetting = document.body.style.overflow;\n      document.body.style.overflow = 'hidden';\n    }\n  });\n};\n\nconst restoreOverflowSetting = () => {\n  // Setting overflow on body/documentElement synchronously in Desktop Safari slows down\n  // the responsiveness for some reason. Setting within a setTimeout fixes this.\n  setTimeout(() => {\n    if (previousBodyPaddingRight !== undefined) {\n      document.body.style.paddingRight = previousBodyPaddingRight;\n\n      // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n      // can be set again.\n      previousBodyPaddingRight = undefined;\n    }\n\n    if (previousBodyOverflowSetting !== undefined) {\n      document.body.style.overflow = previousBodyOverflowSetting;\n\n      // Restore previousBodyOverflowSetting to undefined\n      // so setOverflowHidden knows it can be set again.\n      previousBodyOverflowSetting = undefined;\n    }\n  });\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nconst isTargetElementTotallyScrolled = targetElement => targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n\nconst handleScroll = (event, targetElement) => {\n  const clientY = event.targetTouches[0].clientY - initialClientY;\n\n  if (allowTouchMove(event.target)) {\n    return false;\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event);\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event);\n  }\n\n  event.stopPropagation();\n  return true;\n};\n\nexport const disableBodyScroll = (targetElement, options) => {\n  if (isIosDevice) {\n    // targetElement must be provided, and disableBodyScroll must not have been\n    // called on this targetElement before.\n    if (!targetElement) {\n      // eslint-disable-next-line no-console\n      console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');\n      return;\n    }\n\n    if (targetElement && !locks.some(lock => lock.targetElement === targetElement)) {\n      const lock = {\n        targetElement,\n        options: options || {}\n      };\n\n      locks = [...locks, lock];\n\n      targetElement.ontouchstart = event => {\n        if (event.targetTouches.length === 1) {\n          // detect single touch.\n          initialClientY = event.targetTouches[0].clientY;\n        }\n      };\n      targetElement.ontouchmove = event => {\n        if (event.targetTouches.length === 1) {\n          // detect single touch.\n          handleScroll(event, targetElement);\n        }\n      };\n\n      if (!documentListenerAdded) {\n        document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n        documentListenerAdded = true;\n      }\n    }\n  } else {\n    setOverflowHidden(options);\n    const lock = {\n      targetElement,\n      options: options || {}\n    };\n\n    locks = [...locks, lock];\n  }\n};\n\nexport const clearAllBodyScrollLocks = () => {\n  if (isIosDevice) {\n    // Clear all locks ontouchstart/ontouchmove handlers, and the references.\n    locks.forEach(lock => {\n      lock.targetElement.ontouchstart = null;\n      lock.targetElement.ontouchmove = null;\n    });\n\n    if (documentListenerAdded) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n\n    locks = [];\n\n    // Reset initial clientY.\n    initialClientY = -1;\n  } else {\n    restoreOverflowSetting();\n    locks = [];\n  }\n};\n\nexport const enableBodyScroll = targetElement => {\n  if (isIosDevice) {\n    if (!targetElement) {\n      // eslint-disable-next-line no-console\n      console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');\n      return;\n    }\n\n    targetElement.ontouchstart = null;\n    targetElement.ontouchmove = null;\n\n    locks = locks.filter(lock => lock.targetElement !== targetElement);\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n\n      documentListenerAdded = false;\n    }\n  } else {\n    locks = locks.filter(lock => lock.targetElement !== targetElement);\n    if (!locks.length) {\n      restoreOverflowSetting();\n    }\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}