{"ast":null,"code":"/**\n * Compares two bound objects.\n */\nexport const areBoundsEqual = function (boundA, boundB) {\n  if (boundA === boundB) {\n    return true;\n  }\n\n  if (!(boundA instanceof Object) || !(boundB instanceof Object)) {\n    return false;\n  }\n\n  if (Object.keys(boundA).length !== Object.keys(boundB).length) {\n    return false;\n  }\n\n  if (!areValidBounds(boundA) || !areValidBounds(boundB)) {\n    return false;\n  }\n\n  for (const key of Object.keys(boundA)) {\n    if (boundA[key] !== boundB[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Helper that checks whether an array consists of objects\n * with lat and lng properties\n * @param {object} elem the element to check\n * @returns {boolean} whether or not it's valid\n */\n\nconst areValidBounds = function (elem) {\n  return elem !== null && typeof elem === 'object' && elem.hasOwnProperty('north') && elem.hasOwnProperty('south') && elem.hasOwnProperty('east') && elem.hasOwnProperty('west');\n};","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/google-maps-react/src/lib/areBoundsEqual.js"],"names":["areBoundsEqual","boundA","boundB","Object","keys","length","areValidBounds","key","elem","hasOwnProperty"],"mappings":"AAAA;;;AAIA,OAAO,MAAMA,cAAc,GAAG,UAASC,MAAT,EAAiBC,MAAjB,EAAyB;AACrD,MAAID,MAAM,KAAKC,MAAf,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,MACE,EAAED,MAAM,YAAYE,MAApB,KACA,EAAED,MAAM,YAAYC,MAApB,CAFF,EAGE;AACA,WAAO,KAAP;AACD;;AACD,MAAIA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,KAA+BF,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAAvD,EAA+D;AAC7D,WAAO,KAAP;AACD;;AACD,MACE,CAACC,cAAc,CAACL,MAAD,CAAf,IACA,CAACK,cAAc,CAACJ,MAAD,CAFjB,EAGE;AACA,WAAO,KAAP;AACD;;AACD,OAAK,MAAMK,GAAX,IAAkBJ,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAlB,EAAuC;AACrC,QAAIA,MAAM,CAACM,GAAD,CAAN,KAAgBL,MAAM,CAACK,GAAD,CAA1B,EAAiC;AAC/B,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAzBM;AA2BP;;;;;;;AAMA,MAAMD,cAAc,GAAG,UAASE,IAAT,EAAe;AACpC,SACEA,IAAI,KAAK,IAAT,IACA,OAAOA,IAAP,KAAgB,QADhB,IAEAA,IAAI,CAACC,cAAL,CAAoB,OAApB,CAFA,IAGAD,IAAI,CAACC,cAAL,CAAoB,OAApB,CAHA,IAIAD,IAAI,CAACC,cAAL,CAAoB,MAApB,CAJA,IAKAD,IAAI,CAACC,cAAL,CAAoB,MAApB,CANF;AAQD,CATD","sourcesContent":["/**\n * Compares two bound objects.\n */\n\nexport const areBoundsEqual = function(boundA, boundB) {\n  if (boundA === boundB) {\n    return true;\n  }\n  if (\n    !(boundA instanceof Object) ||\n    !(boundB instanceof Object)\n  ) {\n    return false;\n  }\n  if (Object.keys(boundA).length !== Object.keys(boundB).length) {\n    return false;\n  }\n  if (\n    !areValidBounds(boundA) ||\n    !areValidBounds(boundB)\n  ) {\n    return false;\n  }\n  for (const key of Object.keys(boundA)) {\n    if (boundA[key] !== boundB[key]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Helper that checks whether an array consists of objects\n * with lat and lng properties\n * @param {object} elem the element to check\n * @returns {boolean} whether or not it's valid\n */\nconst areValidBounds = function(elem) {\n  return (\n    elem !== null &&\n    typeof elem === 'object' &&\n    elem.hasOwnProperty('north') &&\n    elem.hasOwnProperty('south') &&\n    elem.hasOwnProperty('east') &&\n    elem.hasOwnProperty('west')\n  );\n};\n"]},"metadata":{},"sourceType":"module"}