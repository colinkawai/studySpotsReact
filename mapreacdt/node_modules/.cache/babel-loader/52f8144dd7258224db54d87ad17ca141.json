{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/App.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport CurrentLocation from \"./Map\";\nexport class Container extends React.Component {\n  render() {\n    const style = {\n      width: \"100vw\",\n      height: \"100vh\"\n    }; // loaded prop is from the GoogleApiComponent\n\n    return (//getting a reference to a google object\n      React.createElement(\"div\", {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(Map, {\n        google: this.props.google,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }))\n    );\n  }\n\n}\nexport class Map extends React.Component {\n  // the case when the map is first loaded\n  // cannot depend upon the google api being avaliable when the component is first loaded\n  // if component is loaded without it the google prop will be undefined\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n  } // this would happen whenever our map has already been loaded previously in our app\n\n\n  componentDidMount() {\n    this.loadMap();\n  } //called when there is a DOM component on the page\n  //need to grab the refrence to the DOM component\n\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef); //instantiate a google map object on our page\n\n      let zoom = 14;\n      let lat = 37.774929;\n      let lng = -122.41941;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // constructor accepts a DOM node\n      // and a configuration object to create a map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Loading map...\");\n  }\n\n} //Higher Order Component that provides wrapper around Google APIs\n//Can be configured by passing a function that will be called with the wrapped component's props\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBFUHG2hhGRTX-FTfz3nwMMNPXKHvqGxZ8\"\n})(MapContainer);\n/*\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false, //Hides or shows the infoWindow\n    activeMarker: {}, //Shows the active marker upon click\n    selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\n  };\n\n  //event handler when marker is clicked\n  //Used to show the google-maps-react component, InfoWindow\n  //Visibility for InfoWindow is controlled by the boolean visible prop\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n  render() {\n    return (\n      //Map component takes in optional props\n      <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\n        <Marker onClick={this.onMarkerClick} name={\"current Location\"} />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </CurrentLocation>\n    );\n  }\n}\n*/","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/App.js"],"names":["React","Component","ReactDOM","GoogleApiWrapper","InfoWindow","Marker","CurrentLocation","Container","render","style","width","height","props","google","Map","componentDidUpdate","prevProps","prevState","loadMap","componentDidMount","maps","mapRef","refs","map","node","findDOMNode","zoom","lat","lng","center","LatLng","mapConfig","Object","assign","apiKey","MapContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,MAAvC,QAAqD,mBAArD;AACA,OAAOC,eAAP,MAA4B,OAA5B;AAEA,OAAO,MAAMC,SAAN,SAAwBP,KAAK,CAACC,SAA9B,CAAwC;AAC7CO,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG;AACZC,MAAAA,KAAK,EAAE,OADK;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAd,CADO,CAKP;;AACA,WACE;AACA;AAAK,QAAA,KAAK,EAAEF,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAE,KAAKG,KAAL,CAAWC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAFF;AAMD;;AAb4C;AAgB/C,OAAO,MAAMC,GAAN,SAAkBd,KAAK,CAACC,SAAxB,CAAkC;AACvC;AACA;AACA;AACAc,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,QAAID,SAAS,CAACH,MAAV,KAAqB,KAAKD,KAAL,CAAWC,MAApC,EAA4C;AAC1C,WAAKK,OAAL;AACD;AACF,GARsC,CAUvC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKD,OAAL;AACD,GAbsC,CAevC;AACA;;;AACAA,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKN,KAAL,IAAc,KAAKA,KAAL,CAAWC,MAA7B,EAAqC;AACnC;AACA,YAAM;AAAEA,QAAAA;AAAF,UAAa,KAAKD,KAAxB;AACA,YAAMQ,IAAI,GAAGP,MAAM,CAACO,IAApB;AAEA,YAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUC,GAAzB;AACA,YAAMC,IAAI,GAAGtB,QAAQ,CAACuB,WAAT,CAAqBJ,MAArB,CAAb,CANmC,CAQnC;;AACA,UAAIK,IAAI,GAAG,EAAX;AACA,UAAIC,GAAG,GAAG,SAAV;AACA,UAAIC,GAAG,GAAG,CAAC,SAAX;AACA,YAAMC,MAAM,GAAG,IAAIT,IAAI,CAACU,MAAT,CAAgBH,GAAhB,EAAqBC,GAArB,CAAf;AACA,YAAMG,SAAS,GAAGC,MAAM,CAACC,MAAP,CAChB,EADgB,EAEhB;AACEJ,QAAAA,MAAM,EAAEA,MADV;AAEEH,QAAAA,IAAI,EAAEA;AAFR,OAFgB,CAAlB,CAbmC,CAoBnC;AACA;;AACA,WAAKH,GAAL,GAAW,IAAIH,IAAI,CAACN,GAAT,CAAaU,IAAb,EAAmBO,SAAnB,CAAX;AACD;AACF;;AAEDvB,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,GAAG,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AA9CsC,C,CAiDzC;AACA;;AACA,eAAeL,gBAAgB,CAAC;AAC9B+B,EAAAA,MAAM,EAAE;AADsB,CAAD,CAAhB,CAEZC,YAFY,CAAf;AAIA","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport CurrentLocation from \"./Map\";\n\nexport class Container extends React.Component {\n  render() {\n    const style = {\n      width: \"100vw\",\n      height: \"100vh\"\n    };\n    // loaded prop is from the GoogleApiComponent\n    return (\n      //getting a reference to a google object\n      <div style={style}>\n        <Map google={this.props.google} />\n      </div>\n    );\n  }\n}\n\nexport class Map extends React.Component {\n  // the case when the map is first loaded\n  // cannot depend upon the google api being avaliable when the component is first loaded\n  // if component is loaded without it the google prop will be undefined\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n  }\n\n  // this would happen whenever our map has already been loaded previously in our app\n  componentDidMount() {\n    this.loadMap();\n  }\n\n  //called when there is a DOM component on the page\n  //need to grab the refrence to the DOM component\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      //instantiate a google map object on our page\n      let zoom = 14;\n      let lat = 37.774929;\n      let lng = -122.41941;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // constructor accepts a DOM node\n      // and a configuration object to create a map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  render() {\n    return <div ref=\"map\">Loading map...</div>;\n  }\n}\n\n//Higher Order Component that provides wrapper around Google APIs\n//Can be configured by passing a function that will be called with the wrapped component's props\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBFUHG2hhGRTX-FTfz3nwMMNPXKHvqGxZ8\"\n})(MapContainer);\n\n/*\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false, //Hides or shows the infoWindow\n    activeMarker: {}, //Shows the active marker upon click\n    selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\n  };\n\n  //event handler when marker is clicked\n  //Used to show the google-maps-react component, InfoWindow\n  //Visibility for InfoWindow is controlled by the boolean visible prop\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n  render() {\n    return (\n      //Map component takes in optional props\n      <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\n        <Marker onClick={this.onMarkerClick} name={\"current Location\"} />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </CurrentLocation>\n    );\n  }\n}\n*/\n"]},"metadata":{},"sourceType":"module"}