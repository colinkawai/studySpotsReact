{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { arePathsEqual } from '../lib/arePathsEqual';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'mouseout', 'mouseover'];\n\nconst wrappedPromise = function () {\n  var wrappedPromise = {},\n      promise = new Promise(function (resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n  wrappedPromise.then = promise.then.bind(promise);\n  wrappedPromise.catch = promise.catch.bind(promise);\n  wrappedPromise.promise = promise;\n  return wrappedPromise;\n};\n\nexport class Polyline extends React.Component {\n  componentDidMount() {\n    this.polylinePromise = wrappedPromise();\n    this.renderPolyline();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.map !== prevProps.map || !arePathsEqual(this.props.path, prevProps.path)) {\n      if (this.polyline) {\n        this.polyline.setMap(null);\n      }\n\n      this.renderPolyline();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.polyline) {\n      this.polyline.setMap(null);\n    }\n  }\n\n  renderPolyline() {\n    const {\n      map,\n      google,\n      path,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      ...props\n    } = this.props;\n\n    if (!google) {\n      return null;\n    }\n\n    const params = {\n      map,\n      path,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      ...props\n    };\n    this.polyline = new google.maps.Polyline(params);\n    evtNames.forEach(e => {\n      this.polyline.addListener(e, this.handleEvent(e));\n    });\n    this.polylinePromise.resolve(this.polyline);\n  }\n\n  getPolyline() {\n    return this.polylinePromise;\n  }\n\n  handleEvent(evt) {\n    return e => {\n      const evtName = `on${camelize(evt)}`;\n\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.polyline, e);\n      }\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n}\nPolyline.propTypes = {\n  path: PropTypes.array,\n  strokeColor: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  strokeWeight: PropTypes.number\n};\nevtNames.forEach(e => Polyline.propTypes[e] = PropTypes.func);\nPolyline.defaultProps = {\n  name: 'Polyline'\n};\nexport default Polyline;","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/google-maps-react/src/components/Polyline.js"],"names":["React","PropTypes","arePathsEqual","camelize","evtNames","wrappedPromise","promise","Promise","resolve","reject","then","bind","catch","Polyline","Component","componentDidMount","polylinePromise","renderPolyline","componentDidUpdate","prevProps","props","map","path","polyline","setMap","componentWillUnmount","google","strokeColor","strokeOpacity","strokeWeight","params","maps","forEach","e","addListener","handleEvent","getPolyline","evt","evtName","render","propTypes","array","string","number","func","defaultProps","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { arePathsEqual } from '../lib/arePathsEqual';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'mouseout', 'mouseover'];\n\nconst wrappedPromise = function() {\n    var wrappedPromise = {},\n        promise = new Promise(function\n           (resolve, reject) {\n            wrappedPromise.resolve = resolve;\n            wrappedPromise.reject = reject;\n        });\n    wrappedPromise.then = promise.then.bind(promise);\n    wrappedPromise.catch = promise.catch.bind(promise);\n    wrappedPromise.promise = promise;\n\n    return wrappedPromise;\n}\n\nexport class Polyline extends React.Component {\n  componentDidMount() {\n    this.polylinePromise = wrappedPromise();\n    this.renderPolyline();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.map !== prevProps.map ||\n      !arePathsEqual(this.props.path, prevProps.path)\n    ) {\n      if (this.polyline) {\n        this.polyline.setMap(null);\n      }\n      this.renderPolyline();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.polyline) {\n      this.polyline.setMap(null);\n    }\n  }\n\n  renderPolyline() {\n    const {\n      map,\n      google,\n      path,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      ...props\n    } = this.props;\n\n    if (!google) {\n        return null;\n    }\n\n    const params = {\n      map,\n      path,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      ...props\n    };\n\n    this.polyline = new google.maps.Polyline(params);\n\n    evtNames.forEach(e => {\n      this.polyline.addListener(e, this.handleEvent(e));\n    });\n\n    this.polylinePromise.resolve(this.polyline);\n  }\n\n  getPolyline() {\n    return this.polylinePromise;\n  }\n\n  handleEvent(evt) {\n    return (e) => {\n      const evtName = `on${camelize(evt)}`\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.polyline, e);\n      }\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nPolyline.propTypes = {\n  path: PropTypes.array,\n  strokeColor: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  strokeWeight: PropTypes.number\n}\n\nevtNames.forEach(e => Polyline.propTypes[e] = PropTypes.func)\n\nPolyline.defaultProps = {\n  name: 'Polyline'\n}\n\nexport default Polyline\n"]},"metadata":{},"sourceType":"module"}