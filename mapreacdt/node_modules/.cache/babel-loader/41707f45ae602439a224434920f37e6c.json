{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { arePathsEqual } from '../lib/arePathsEqual';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'mouseout', 'mouseover'];\n\nconst wrappedPromise = function () {\n  var wrappedPromise = {},\n      promise = new Promise(function (resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n  wrappedPromise.then = promise.then.bind(promise);\n  wrappedPromise.catch = promise.catch.bind(promise);\n  wrappedPromise.promise = promise;\n  return wrappedPromise;\n};\n\nexport class Circle extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.centerChanged = newCenter => {\n      const {\n        lat,\n        lng\n      } = this.props.center;\n      return lat !== newCenter.lat || lng !== newCenter.lng;\n    };\n\n    this.propsChanged = newProps => {\n      if (this.centerChanged(newProps.center)) return true;\n      return Object.keys(Circle.propTypes).some(key => this.props[key] !== newProps[key]);\n    };\n\n    this.destroyCircle = () => {\n      if (this.circle) {\n        this.circle.setMap(null);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.circlePromise = wrappedPromise();\n    this.renderCircle();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      path,\n      map\n    } = this.props;\n\n    if (this.propsChanged(prevProps) || map !== prevProps.map || !arePathsEqual(path, prevProps.path)) {\n      this.destroyCircle();\n      this.renderCircle();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyCircle();\n  }\n\n  renderCircle() {\n    const {\n      map,\n      google,\n      center,\n      radius,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      draggable,\n      visible,\n      ...props\n    } = this.props;\n\n    if (!google) {\n      return null;\n    }\n\n    const params = { ...props,\n      map,\n      center,\n      radius,\n      draggable,\n      visible,\n      options: {\n        strokeColor,\n        strokeOpacity,\n        strokeWeight,\n        fillColor,\n        fillOpacity\n      }\n    };\n    this.circle = new google.maps.Circle(params);\n    evtNames.forEach(e => {\n      this.circle.addListener(e, this.handleEvent(e));\n    });\n    this.circlePromise.resolve(this.circle);\n  }\n\n  getCircle() {\n    return this.circlePromise;\n  }\n\n  handleEvent(evt) {\n    return e => {\n      const evtName = `on${camelize(evt)}`;\n\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.circle, e);\n      }\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n}\nCircle.propTypes = {\n  center: PropTypes.object,\n  radius: PropTypes.number,\n  strokeColor: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  strokeWeight: PropTypes.number,\n  fillColor: PropTypes.string,\n  fillOpacity: PropTypes.number,\n  draggable: PropTypes.bool,\n  visible: PropTypes.bool\n};\nevtNames.forEach(e => Circle.propTypes[e] = PropTypes.func);\nCircle.defaultProps = {\n  name: 'Circle'\n};\nexport default Circle;","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/google-maps-react/src/components/Circle.js"],"names":["React","PropTypes","arePathsEqual","camelize","evtNames","wrappedPromise","promise","Promise","resolve","reject","then","bind","catch","Circle","Component","centerChanged","newCenter","lat","lng","props","center","propsChanged","newProps","Object","keys","propTypes","some","key","destroyCircle","circle","setMap","componentDidMount","circlePromise","renderCircle","componentDidUpdate","prevProps","path","map","componentWillUnmount","google","radius","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","draggable","visible","params","options","maps","forEach","e","addListener","handleEvent","getCircle","evt","evtName","render","object","number","string","bool","func","defaultProps","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,MAAMC,QAAQ,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,WAAtB,CAAjB;;AAEA,MAAMC,cAAc,GAAG,YAAW;AAC9B,MAAIA,cAAc,GAAG,EAArB;AAAA,MACIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAClBC,OADkB,EACTC,MADS,EACD;AACjBJ,IAAAA,cAAc,CAACG,OAAf,GAAyBA,OAAzB;AACAH,IAAAA,cAAc,CAACI,MAAf,GAAwBA,MAAxB;AACH,GAJS,CADd;AAMAJ,EAAAA,cAAc,CAACK,IAAf,GAAsBJ,OAAO,CAACI,IAAR,CAAaC,IAAb,CAAkBL,OAAlB,CAAtB;AACAD,EAAAA,cAAc,CAACO,KAAf,GAAuBN,OAAO,CAACM,KAAR,CAAcD,IAAd,CAAmBL,OAAnB,CAAvB;AACAD,EAAAA,cAAc,CAACC,OAAf,GAAyBA,OAAzB;AAEA,SAAOD,cAAP;AACH,CAZD;;AAcA,OAAO,MAAMQ,MAAN,SAAqBb,KAAK,CAACc,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAmB1CC,aAnB0C,GAmBzBC,SAAD,IAAe;AAC7B,YAAM;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAe,KAAKC,KAAL,CAAWC,MAAhC;AACA,aAAOH,GAAG,KAAKD,SAAS,CAACC,GAAlB,IAAyBC,GAAG,KAAKF,SAAS,CAACE,GAAlD;AACD,KAtByC;;AAAA,SAwB1CG,YAxB0C,GAwB1BC,QAAD,IAAc;AAC3B,UAAI,KAAKP,aAAL,CAAmBO,QAAQ,CAACF,MAA5B,CAAJ,EAAyC,OAAO,IAAP;AAEzC,aAAOG,MAAM,CAACC,IAAP,CAAYX,MAAM,CAACY,SAAnB,EAA8BC,IAA9B,CAAmCC,GAAG,IAC3C,KAAKR,KAAL,CAAWQ,GAAX,MAAoBL,QAAQ,CAACK,GAAD,CADvB,CAAP;AAGD,KA9ByC;;AAAA,SAoC1CC,aApC0C,GAoC1B,MAAM;AACpB,UAAI,KAAKC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYC,MAAZ,CAAmB,IAAnB;AACD;AACF,KAxCyC;AAAA;;AAC1CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,aAAL,GAAqB3B,cAAc,EAAnC;AACA,SAAK4B,YAAL;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAgB,KAAKlB,KAA3B;;AAEA,QACE,KAAKE,YAAL,CAAkBc,SAAlB,KACAE,GAAG,KAAKF,SAAS,CAACE,GADlB,IAEA,CAACnC,aAAa,CAACkC,IAAD,EAAOD,SAAS,CAACC,IAAjB,CAHhB,EAIE;AACA,WAAKR,aAAL;AACA,WAAKK,YAAL;AACD;AACF;;AAeDK,EAAAA,oBAAoB,GAAG;AACrB,SAAKV,aAAL;AACD;;AAQDK,EAAAA,YAAY,GAAG;AACb,UAAM;AACJI,MAAAA,GADI;AAEJE,MAAAA,MAFI;AAGJnB,MAAAA,MAHI;AAIJoB,MAAAA,MAJI;AAKJC,MAAAA,WALI;AAMJC,MAAAA,aANI;AAOJC,MAAAA,YAPI;AAQJC,MAAAA,SARI;AASJC,MAAAA,WATI;AAUJC,MAAAA,SAVI;AAWJC,MAAAA,OAXI;AAYJ,SAAG5B;AAZC,QAaF,KAAKA,KAbT;;AAeA,QAAI,CAACoB,MAAL,EAAa;AACT,aAAO,IAAP;AACH;;AAED,UAAMS,MAAM,GAAG,EACb,GAAG7B,KADU;AAEbkB,MAAAA,GAFa;AAGbjB,MAAAA,MAHa;AAIboB,MAAAA,MAJa;AAKbM,MAAAA,SALa;AAMbC,MAAAA,OANa;AAObE,MAAAA,OAAO,EAAE;AACPR,QAAAA,WADO;AAEPC,QAAAA,aAFO;AAGPC,QAAAA,YAHO;AAIPC,QAAAA,SAJO;AAKPC,QAAAA;AALO;AAPI,KAAf;AAgBA,SAAKhB,MAAL,GAAc,IAAIU,MAAM,CAACW,IAAP,CAAYrC,MAAhB,CAAuBmC,MAAvB,CAAd;AAEA5C,IAAAA,QAAQ,CAAC+C,OAAT,CAAiBC,CAAC,IAAI;AACpB,WAAKvB,MAAL,CAAYwB,WAAZ,CAAwBD,CAAxB,EAA2B,KAAKE,WAAL,CAAiBF,CAAjB,CAA3B;AACD,KAFD;AAIA,SAAKpB,aAAL,CAAmBxB,OAAnB,CAA2B,KAAKqB,MAAhC;AACD;;AAED0B,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKvB,aAAZ;AACD;;AAEDsB,EAAAA,WAAW,CAACE,GAAD,EAAM;AACf,WAAQJ,CAAD,IAAO;AACZ,YAAMK,OAAO,GAAI,KAAItD,QAAQ,CAACqD,GAAD,CAAM,EAAnC;;AACA,UAAI,KAAKrC,KAAL,CAAWsC,OAAX,CAAJ,EAAyB;AACvB,aAAKtC,KAAL,CAAWsC,OAAX,EAAoB,KAAKtC,KAAzB,EAAgC,KAAKU,MAArC,EAA6CuB,CAA7C;AACD;AACF,KALD;AAMD;;AAEDM,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AAtGyC;AAyG5C7C,MAAM,CAACY,SAAP,GAAmB;AACjBL,EAAAA,MAAM,EAAEnB,SAAS,CAAC0D,MADD;AAEjBnB,EAAAA,MAAM,EAAEvC,SAAS,CAAC2D,MAFD;AAGjBnB,EAAAA,WAAW,EAAExC,SAAS,CAAC4D,MAHN;AAIjBnB,EAAAA,aAAa,EAAEzC,SAAS,CAAC2D,MAJR;AAKjBjB,EAAAA,YAAY,EAAE1C,SAAS,CAAC2D,MALP;AAMjBhB,EAAAA,SAAS,EAAE3C,SAAS,CAAC4D,MANJ;AAOjBhB,EAAAA,WAAW,EAAE5C,SAAS,CAAC2D,MAPN;AAQjBd,EAAAA,SAAS,EAAE7C,SAAS,CAAC6D,IARJ;AASjBf,EAAAA,OAAO,EAAE9C,SAAS,CAAC6D;AATF,CAAnB;AAYA1D,QAAQ,CAAC+C,OAAT,CAAiBC,CAAC,IAAIvC,MAAM,CAACY,SAAP,CAAiB2B,CAAjB,IAAsBnD,SAAS,CAAC8D,IAAtD;AAEAlD,MAAM,CAACmD,YAAP,GAAsB;AACpBC,EAAAA,IAAI,EAAE;AADc,CAAtB;AAIA,eAAepD,MAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { arePathsEqual } from '../lib/arePathsEqual';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'mouseout', 'mouseover'];\n\nconst wrappedPromise = function() {\n    var wrappedPromise = {},\n        promise = new Promise(function\n           (resolve, reject) {\n            wrappedPromise.resolve = resolve;\n            wrappedPromise.reject = reject;\n        });\n    wrappedPromise.then = promise.then.bind(promise);\n    wrappedPromise.catch = promise.catch.bind(promise);\n    wrappedPromise.promise = promise;\n\n    return wrappedPromise;\n}\n\nexport class Circle extends React.Component {\n  componentDidMount() {\n    this.circlePromise = wrappedPromise();\n    this.renderCircle();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { path, map } = this.props;\n\n    if (\n      this.propsChanged(prevProps) ||\n      map !== prevProps.map ||\n      !arePathsEqual(path, prevProps.path)\n    ) {\n      this.destroyCircle();\n      this.renderCircle();\n    }\n  }\n\n  centerChanged = (newCenter) => {\n    const { lat, lng } = this.props.center;\n    return lat !== newCenter.lat || lng !== newCenter.lng;\n  };\n\n  propsChanged = (newProps) => {\n    if (this.centerChanged(newProps.center)) return true;\n\n    return Object.keys(Circle.propTypes).some(key => (\n      this.props[key] !== newProps[key]\n    ));\n  };\n\n  componentWillUnmount() {\n    this.destroyCircle();\n  }\n\n  destroyCircle = () => {\n    if (this.circle) {\n      this.circle.setMap(null);\n    }\n  }\n\n  renderCircle() {\n    const {\n      map,\n      google,\n      center,\n      radius,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      draggable,\n      visible,\n      ...props\n    } = this.props;\n\n    if (!google) {\n        return null;\n    }\n\n    const params = {\n      ...props,\n      map,\n      center,\n      radius,\n      draggable,\n      visible,\n      options: {\n        strokeColor,\n        strokeOpacity,\n        strokeWeight,\n        fillColor,\n        fillOpacity,\n      },\n    };\n\n    this.circle = new google.maps.Circle(params);\n\n    evtNames.forEach(e => {\n      this.circle.addListener(e, this.handleEvent(e));\n    });\n\n    this.circlePromise.resolve(this.circle);\n  }\n\n  getCircle() {\n    return this.circlePromise;\n  }\n\n  handleEvent(evt) {\n    return (e) => {\n      const evtName = `on${camelize(evt)}`\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.circle, e);\n      }\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nCircle.propTypes = {\n  center: PropTypes.object,\n  radius: PropTypes.number,\n  strokeColor: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  strokeWeight: PropTypes.number,\n  fillColor: PropTypes.string,\n  fillOpacity: PropTypes.number,\n  draggable: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nevtNames.forEach(e => Circle.propTypes[e] = PropTypes.func)\n\nCircle.defaultProps = {\n  name: 'Circle'\n}\n\nexport default Circle\n"]},"metadata":{},"sourceType":"module"}