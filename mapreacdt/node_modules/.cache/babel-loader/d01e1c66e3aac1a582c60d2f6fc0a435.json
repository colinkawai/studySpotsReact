{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/components/index.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport { camelize } from \"src/google-maps-react/src/lib/String.js\";\nimport { makeCancelable } from \"src/google-maps-react/src/lib/cancelablePromise\";\nconst mapStyles = {\n  container: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  map: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0\n  }\n};\nconst evtNames = [\"ready\", \"click\", \"dragend\", \"recenter\", \"bounds_changed\", \"center_changed\", \"dblclick\", \"dragstart\", \"heading_change\", \"idle\", \"maptypeid_changed\", \"mousemove\", \"mouseout\", \"mouseover\", \"projection_changed\", \"resize\", \"rightclick\", \"tilesloaded\", \"tilt_changed\", \"zoom_changed\"];\nexport { wrapper as GoogleApiWrapper } from \"./GoogleApiComponent\";\nexport { Marker } from \"./Marker\";\nexport { InfoWindow } from \"./InfoWindow\";\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (!props.hasOwnProperty(\"google\")) {\n      throw new Error(\"You must include a `google` prop\");\n    }\n\n    this.listeners = {};\n    this.state = {\n      currentLocation: {\n        lat: this.props.initialCenter.lat,\n        lng: this.props.initialCenter.lng\n      }\n    };\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        this.geoPromise = makeCancelable(new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(resolve, reject);\n        }));\n        this.geoPromise.promise.then(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        }).catch(e => e);\n      }\n    }\n\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (this.props.visible !== prevProps.visible) {\n      this.restyleMap();\n    }\n\n    if (this.props.zoom !== prevProps.zoom) {\n      this.map.setZoom(this.props.zoom);\n    }\n\n    if (this.props.center !== prevProps.center) {\n      this.setState({\n        currentLocation: this.props.center\n      });\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n\n    if (this.props.bounds && this.props.bounds !== prevProps.bounds) {\n      this.map.fitBounds(this.props.bounds);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      google\n    } = this.props;\n\n    if (this.geoPromise) {\n      this.geoPromise.cancel();\n    }\n\n    Object.keys(this.listeners).forEach(e => {\n      google.maps.event.removeListener(this.listeners[e]);\n    });\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.mapRef.current;\n      const node = ReactDOM.findDOMNode(mapRef);\n      const curr = this.state.currentLocation;\n      const center = new maps.LatLng(curr.lat, curr.lng);\n      const mapTypeIds = this.props.google.maps.MapTypeId || {};\n      const mapTypeFromProps = String(this.props.mapType).toUpperCase();\n      const mapConfig = Object.assign({}, {\n        mapTypeId: mapTypeIds[mapTypeFromProps],\n        center: center,\n        zoom: this.props.zoom,\n        maxZoom: this.props.maxZoom,\n        minZoom: this.props.minZoom,\n        clickableIcons: !!this.props.clickableIcons,\n        disableDefaultUI: this.props.disableDefaultUI,\n        zoomControl: this.props.zoomControl,\n        zoomControlOptions: this.props.zoomControlOptions,\n        mapTypeControl: this.props.mapTypeControl,\n        mapTypeControlOptions: this.props.mapTypeControlOptions,\n        scaleControl: this.props.scaleControl,\n        streetViewControl: this.props.streetViewControl,\n        streetViewControlOptions: this.props.streetViewControlOptions,\n        panControl: this.props.panControl,\n        rotateControl: this.props.rotateControl,\n        fullscreenControl: this.props.fullscreenControl,\n        scrollwheel: this.props.scrollwheel,\n        draggable: this.props.draggable,\n        draggableCursor: this.props.draggableCursor,\n        keyboardShortcuts: this.props.keyboardShortcuts,\n        disableDoubleClickZoom: this.props.disableDoubleClickZoom,\n        noClear: this.props.noClear,\n        styles: this.props.styles,\n        gestureHandling: this.props.gestureHandling\n      });\n      Object.keys(mapConfig).forEach(key => {\n        // Allow to configure mapConfig with 'false'\n        if (mapConfig[key] === null) {\n          delete mapConfig[key];\n        }\n      });\n      this.map = new maps.Map(node, mapConfig);\n      evtNames.forEach(e => {\n        this.listeners[e] = this.map.addListener(e, this.handleEvent(e));\n      });\n      maps.event.trigger(this.map, \"ready\");\n      this.forceUpdate();\n    }\n  }\n\n  handleEvent(evtName) {\n    let timeout;\n    const handlerName = `on${camelize(evtName)}`;\n    return e => {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      timeout = setTimeout(() => {\n        if (this.props[handlerName]) {\n          this.props[handlerName](this.props, this.map, e);\n        }\n      }, 0);\n    };\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const {\n      google\n    } = this.props;\n    if (!google) return;\n    const maps = google.maps;\n\n    if (map) {\n      let center = this.state.currentLocation;\n\n      if (!(center instanceof google.maps.LatLng)) {\n        center = new google.maps.LatLng(center.lat, center.lng);\n      } // map.panTo(center)\n\n\n      map.setCenter(center);\n      maps.event.trigger(map, \"recenter\");\n    }\n  }\n\n  restyleMap() {\n    if (this.map) {\n      const {\n        google\n      } = this.props;\n      google.maps.event.trigger(this.map, \"resize\");\n    }\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map, this.props.style, {\n      display: this.props.visible ? \"inherit\" : \"none\"\n    });\n    const containerStyles = Object.assign({}, mapStyles.container, this.props.containerStyle);\n    return React.createElement(\"div\", {\n      style: containerStyles,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: this.mapRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n}\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  centerAroundCurrentLocation: PropTypes.bool,\n  center: PropTypes.object,\n  initialCenter: PropTypes.object,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  containerStyle: PropTypes.object,\n  visible: PropTypes.bool,\n  mapType: PropTypes.string,\n  maxZoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  clickableIcons: PropTypes.bool,\n  disableDefaultUI: PropTypes.bool,\n  zoomControl: PropTypes.bool,\n  zoomControlOptions: PropTypes.object,\n  mapTypeControl: PropTypes.bool,\n  mapTypeControlOptions: PropTypes.bool,\n  scaleControl: PropTypes.bool,\n  streetViewControl: PropTypes.bool,\n  streetViewControlOptions: PropTypes.object,\n  panControl: PropTypes.bool,\n  rotateControl: PropTypes.bool,\n  fullscreenControl: PropTypes.bool,\n  scrollwheel: PropTypes.bool,\n  draggable: PropTypes.bool,\n  draggableCursor: PropTypes.string,\n  keyboardShortcuts: PropTypes.bool,\n  disableDoubleClickZoom: PropTypes.bool,\n  noClear: PropTypes.bool,\n  styles: PropTypes.array,\n  gestureHandling: PropTypes.string,\n  bounds: PropTypes.object\n};\nevtNames.forEach(e => Map.propTypes[camelize(e)] = PropTypes.func);\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  center: {},\n  centerAroundCurrentLocation: false,\n  style: {},\n  containerStyle: {},\n  visible: true\n};\nexport default Map;","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/components/index.js"],"names":["React","PropTypes","ReactDOM","camelize","makeCancelable","mapStyles","container","position","width","height","map","left","right","bottom","top","evtNames","wrapper","GoogleApiWrapper","Marker","InfoWindow","Map","Component","constructor","props","hasOwnProperty","Error","listeners","state","currentLocation","lat","initialCenter","lng","mapRef","createRef","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","geoPromise","Promise","resolve","reject","getCurrentPosition","promise","then","pos","coords","setState","latitude","longitude","catch","e","loadMap","componentDidUpdate","prevProps","prevState","google","visible","restyleMap","zoom","setZoom","center","recenterMap","bounds","fitBounds","componentWillUnmount","cancel","Object","keys","forEach","maps","event","removeListener","current","node","findDOMNode","curr","LatLng","mapTypeIds","MapTypeId","mapTypeFromProps","String","mapType","toUpperCase","mapConfig","assign","mapTypeId","maxZoom","minZoom","clickableIcons","disableDefaultUI","zoomControl","zoomControlOptions","mapTypeControl","mapTypeControlOptions","scaleControl","streetViewControl","streetViewControlOptions","panControl","rotateControl","fullscreenControl","scrollwheel","draggable","draggableCursor","keyboardShortcuts","disableDoubleClickZoom","noClear","styles","gestureHandling","key","addListener","handleEvent","trigger","forceUpdate","evtName","timeout","handlerName","clearTimeout","setTimeout","setCenter","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","display","containerStyles","containerStyle","className","propTypes","object","number","bool","string","array","func","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport { camelize } from \"src/google-maps-react/src/lib/String.js\";\nimport { makeCancelable } from \"src/google-maps-react/src/lib/cancelablePromise\";\n\nconst mapStyles = {\n  container: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  map: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0\n  }\n};\n\nconst evtNames = [\n  \"ready\",\n  \"click\",\n  \"dragend\",\n  \"recenter\",\n  \"bounds_changed\",\n  \"center_changed\",\n  \"dblclick\",\n  \"dragstart\",\n  \"heading_change\",\n  \"idle\",\n  \"maptypeid_changed\",\n  \"mousemove\",\n  \"mouseout\",\n  \"mouseover\",\n  \"projection_changed\",\n  \"resize\",\n  \"rightclick\",\n  \"tilesloaded\",\n  \"tilt_changed\",\n  \"zoom_changed\"\n];\n\nexport { wrapper as GoogleApiWrapper } from \"./GoogleApiComponent\";\nexport { Marker } from \"./Marker\";\nexport { InfoWindow } from \"./InfoWindow\";\n\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (!props.hasOwnProperty(\"google\")) {\n      throw new Error(\"You must include a `google` prop\");\n    }\n\n    this.listeners = {};\n    this.state = {\n      currentLocation: {\n        lat: this.props.initialCenter.lat,\n        lng: this.props.initialCenter.lng\n      }\n    };\n\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        this.geoPromise = makeCancelable(\n          new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition(resolve, reject);\n          })\n        );\n\n        this.geoPromise.promise\n          .then(pos => {\n            const coords = pos.coords;\n            this.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude\n              }\n            });\n          })\n          .catch(e => e);\n      }\n    }\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (this.props.visible !== prevProps.visible) {\n      this.restyleMap();\n    }\n    if (this.props.zoom !== prevProps.zoom) {\n      this.map.setZoom(this.props.zoom);\n    }\n    if (this.props.center !== prevProps.center) {\n      this.setState({\n        currentLocation: this.props.center\n      });\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n    if (this.props.bounds && this.props.bounds !== prevProps.bounds) {\n      this.map.fitBounds(this.props.bounds);\n    }\n  }\n\n  componentWillUnmount() {\n    const { google } = this.props;\n    if (this.geoPromise) {\n      this.geoPromise.cancel();\n    }\n    Object.keys(this.listeners).forEach(e => {\n      google.maps.event.removeListener(this.listeners[e]);\n    });\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.mapRef.current;\n      const node = ReactDOM.findDOMNode(mapRef);\n      const curr = this.state.currentLocation;\n      const center = new maps.LatLng(curr.lat, curr.lng);\n\n      const mapTypeIds = this.props.google.maps.MapTypeId || {};\n      const mapTypeFromProps = String(this.props.mapType).toUpperCase();\n\n      const mapConfig = Object.assign(\n        {},\n        {\n          mapTypeId: mapTypeIds[mapTypeFromProps],\n          center: center,\n          zoom: this.props.zoom,\n          maxZoom: this.props.maxZoom,\n          minZoom: this.props.minZoom,\n          clickableIcons: !!this.props.clickableIcons,\n          disableDefaultUI: this.props.disableDefaultUI,\n          zoomControl: this.props.zoomControl,\n          zoomControlOptions: this.props.zoomControlOptions,\n          mapTypeControl: this.props.mapTypeControl,\n          mapTypeControlOptions: this.props.mapTypeControlOptions,\n          scaleControl: this.props.scaleControl,\n          streetViewControl: this.props.streetViewControl,\n          streetViewControlOptions: this.props.streetViewControlOptions,\n          panControl: this.props.panControl,\n          rotateControl: this.props.rotateControl,\n          fullscreenControl: this.props.fullscreenControl,\n          scrollwheel: this.props.scrollwheel,\n          draggable: this.props.draggable,\n          draggableCursor: this.props.draggableCursor,\n          keyboardShortcuts: this.props.keyboardShortcuts,\n          disableDoubleClickZoom: this.props.disableDoubleClickZoom,\n          noClear: this.props.noClear,\n          styles: this.props.styles,\n          gestureHandling: this.props.gestureHandling\n        }\n      );\n\n      Object.keys(mapConfig).forEach(key => {\n        // Allow to configure mapConfig with 'false'\n        if (mapConfig[key] === null) {\n          delete mapConfig[key];\n        }\n      });\n\n      this.map = new maps.Map(node, mapConfig);\n\n      evtNames.forEach(e => {\n        this.listeners[e] = this.map.addListener(e, this.handleEvent(e));\n      });\n      maps.event.trigger(this.map, \"ready\");\n      this.forceUpdate();\n    }\n  }\n\n  handleEvent(evtName) {\n    let timeout;\n    const handlerName = `on${camelize(evtName)}`;\n\n    return e => {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      timeout = setTimeout(() => {\n        if (this.props[handlerName]) {\n          this.props[handlerName](this.props, this.map, e);\n        }\n      }, 0);\n    };\n  }\n\n  recenterMap() {\n    const map = this.map;\n\n    const { google } = this.props;\n\n    if (!google) return;\n    const maps = google.maps;\n\n    if (map) {\n      let center = this.state.currentLocation;\n      if (!(center instanceof google.maps.LatLng)) {\n        center = new google.maps.LatLng(center.lat, center.lng);\n      }\n      // map.panTo(center)\n      map.setCenter(center);\n      maps.event.trigger(map, \"recenter\");\n    }\n  }\n\n  restyleMap() {\n    if (this.map) {\n      const { google } = this.props;\n      google.maps.event.trigger(this.map, \"resize\");\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map, this.props.style, {\n      display: this.props.visible ? \"inherit\" : \"none\"\n    });\n\n    const containerStyles = Object.assign(\n      {},\n      mapStyles.container,\n      this.props.containerStyle\n    );\n\n    return (\n      <div style={containerStyles} className={this.props.className}>\n        <div style={style} ref={this.mapRef}>\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\n\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  centerAroundCurrentLocation: PropTypes.bool,\n  center: PropTypes.object,\n  initialCenter: PropTypes.object,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  containerStyle: PropTypes.object,\n  visible: PropTypes.bool,\n  mapType: PropTypes.string,\n  maxZoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  clickableIcons: PropTypes.bool,\n  disableDefaultUI: PropTypes.bool,\n  zoomControl: PropTypes.bool,\n  zoomControlOptions: PropTypes.object,\n  mapTypeControl: PropTypes.bool,\n  mapTypeControlOptions: PropTypes.bool,\n  scaleControl: PropTypes.bool,\n  streetViewControl: PropTypes.bool,\n  streetViewControlOptions: PropTypes.object,\n  panControl: PropTypes.bool,\n  rotateControl: PropTypes.bool,\n  fullscreenControl: PropTypes.bool,\n  scrollwheel: PropTypes.bool,\n  draggable: PropTypes.bool,\n  draggableCursor: PropTypes.string,\n  keyboardShortcuts: PropTypes.bool,\n  disableDoubleClickZoom: PropTypes.bool,\n  noClear: PropTypes.bool,\n  styles: PropTypes.array,\n  gestureHandling: PropTypes.string,\n  bounds: PropTypes.object\n};\n\nevtNames.forEach(e => (Map.propTypes[camelize(e)] = PropTypes.func));\n\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  center: {},\n  centerAroundCurrentLocation: false,\n  style: {},\n  containerStyle: {},\n  visible: true\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}