{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport Map from \"../src/components/index.js\";\nimport axios from \"axios\";\nconst API_KEY = `${process.env.REACT_APP_API_KEY}`;\nexport class MapContainer extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n      console.log(props);\n    };\n\n    this.onMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      // an array of lngs and lats\n      addresses: [],\n      locations: [],\n      names: [],\n      hours: [],\n      ratings: [],\n      currentLocation: {\n        lat: \"\",\n        lng: \"\"\n      }\n    };\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.getMapInfo = this.getMapInfo.bind(this);\n    this.centerMoved = this.centerMoved.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n  }\n\n  getMapInfo() {\n    axios.get(`${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?`, {\n      headers: {\n        Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n      },\n      params: {\n        categories: \"coffee, libraries\",\n        latitude: this.state.currentLocation.lat,\n        longitude: this.state.currentLocation.lng,\n        limit: 50\n      }\n    }) // set state for locations, names\n    .then(res => {\n      for (var key in res.data.businesses) {\n        var addressesBase = res.data.businesses[key].location;\n        this.setState({\n          locations: this.state.locations.concat(res.data.businesses[key].coordinates),\n          names: this.state.names.concat(res.data.businesses[key].name),\n          ratings: this.state.ratings.concat(res.data.businesses[key].rating),\n          addresses: this.state.addresses.concat(\"\" + addressesBase.address1 + \" \" + addressesBase.city + \",\" + addressesBase.state + \" \" + addressesBase.zip_code)\n        });\n      }\n    }).catch(err => {\n      console.log(\"Yelp API call error\");\n    });\n  }\n\n  centerMoved(mapProps, map) {\n    this.setState({\n      currentLocation: {\n        lat: map.center.lat(),\n        lng: map.center.lng()\n      }\n    }, () => {\n      this.getMapInfo();\n    });\n  } //after a location change call after recall the api\n  // using a setState callback (setState(updater, callback))\n\n\n  handleLocationChange(lat, lng) {\n    this.setState({\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    }, () => {\n      this.getMapInfo();\n    });\n  } // if a user clicks redo search in this area, call set state\n  // which will re render everything\n  // how to create event listeners for a component\n\n\n  render() {\n    const names = this.state.names;\n    const locations = this.state.locations;\n    const addresses = this.state.addresses;\n    const ratings = this.state.ratings;\n    var elements = [];\n\n    for (var i = 0; i < names.length; i++) {\n      elements.push(React.createElement(Marker, {\n        onClick: this.onMarkerClick,\n        title: names[i],\n        name: names[i],\n        position: {\n          lat: locations[i].latitude,\n          lng: locations[i].longitude\n        },\n        addresses: addresses[i],\n        ratings: ratings[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }));\n    } // loaded prop is from the GoogleApiComponent\n\n\n    return (//getting a reference to a google object\n      React.createElement(Map, {\n        centerAroundCurrentLocation: true,\n        google: this.props.google,\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          position: \"relative\"\n        },\n        className: \"map\",\n        zoom: 14,\n        onClick: this.onMapClicked,\n        onDragend: this.centerMoved,\n        onLocationChange: this.handleLocationChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, elements, React.createElement(InfoWindow, {\n        marker: this.state.activeMarker,\n        visible: this.state.showingInfoWindow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.state.selectedPlace.title), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, this.state.selectedPlace.addresses), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, this.state.selectedPlace.ratings, \"/5\"))))\n    );\n  }\n\n} //Higher Order Component that provides wrapper around Google APIs\n//Can be configured by passing a function that will be called with the wrapped component's props\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBFUHG2hhGRTX-FTfz3nwMMNPXKHvqGxZ8\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/App.js"],"names":["React","ReactDOM","GoogleApiWrapper","InfoWindow","Marker","Map","axios","API_KEY","process","env","REACT_APP_API_KEY","MapContainer","Component","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","console","log","onMapClicked","state","addresses","locations","names","hours","ratings","currentLocation","lat","lng","handleLocationChange","bind","getMapInfo","centerMoved","get","headers","Authorization","params","categories","latitude","longitude","limit","then","res","key","data","businesses","addressesBase","location","concat","coordinates","name","rating","address1","city","zip_code","catch","err","mapProps","map","center","render","elements","i","length","push","google","width","height","position","title","apiKey"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport Map from \"../src/components/index.js\";\nimport axios from \"axios\";\n\nconst API_KEY = `${process.env.REACT_APP_API_KEY}`;\n\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      // an array of lngs and lats\n      addresses: [],\n      locations: [],\n      names: [],\n      hours: [],\n      ratings: [],\n      currentLocation: {\n        lat: \"\",\n        lng: \"\"\n      }\n    };\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.getMapInfo = this.getMapInfo.bind(this);\n    this.centerMoved = this.centerMoved.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n  }\n\n  getMapInfo() {\n    axios\n      .get(\n        `${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?`,\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n          },\n          params: {\n            categories: \"coffee, libraries\",\n            latitude: this.state.currentLocation.lat,\n            longitude: this.state.currentLocation.lng,\n            limit: 50\n          }\n        }\n      )\n      // set state for locations, names\n      .then(res => {\n        for (var key in res.data.businesses) {\n          var addressesBase = res.data.businesses[key].location;\n          this.setState({\n            locations: this.state.locations.concat(\n              res.data.businesses[key].coordinates\n            ),\n            names: this.state.names.concat(res.data.businesses[key].name),\n            ratings: this.state.ratings.concat(res.data.businesses[key].rating),\n            addresses: this.state.addresses.concat(\n              \"\" +\n                addressesBase.address1 +\n                \" \" +\n                addressesBase.city +\n                \",\" +\n                addressesBase.state +\n                \" \" +\n                addressesBase.zip_code\n            )\n          });\n        }\n      })\n      .catch(err => {\n        console.log(\"Yelp API call error\");\n      });\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n    console.log(props);\n  };\n  onMapClicked = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  centerMoved(mapProps, map) {\n    this.setState(\n      {\n        currentLocation: {\n          lat: map.center.lat(),\n          lng: map.center.lng()\n        }\n      },\n      () => {\n        this.getMapInfo();\n      }\n    );\n  }\n\n  //after a location change call after recall the api\n  // using a setState callback (setState(updater, callback))\n  handleLocationChange(lat, lng) {\n    this.setState(\n      {\n        currentLocation: {\n          lat: lat,\n          lng: lng\n        }\n      },\n      () => {\n        this.getMapInfo();\n      }\n    );\n  }\n\n  // if a user clicks redo search in this area, call set state\n  // which will re render everything\n  // how to create event listeners for a component\n  render() {\n    const names = this.state.names;\n    const locations = this.state.locations;\n    const addresses = this.state.addresses;\n    const ratings = this.state.ratings;\n    var elements = [];\n    for (var i = 0; i < names.length; i++) {\n      elements.push(\n        <Marker\n          onClick={this.onMarkerClick}\n          title={names[i]}\n          name={names[i]}\n          position={{\n            lat: locations[i].latitude,\n            lng: locations[i].longitude\n          }}\n          addresses={addresses[i]}\n          ratings={ratings[i]}\n        />\n      );\n    }\n    // loaded prop is from the GoogleApiComponent\n    return (\n      //getting a reference to a google object\n      <Map\n        centerAroundCurrentLocation\n        google={this.props.google}\n        style={{ width: \"100%\", height: \"100%\", position: \"relative\" }}\n        className={\"map\"}\n        zoom={14}\n        onClick={this.onMapClicked}\n        onDragend={this.centerMoved}\n        onLocationChange={this.handleLocationChange}\n      >\n        {elements}\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n        >\n          <div>\n            <h1>{this.state.selectedPlace.title}</h1>\n            <h2>{this.state.selectedPlace.addresses}</h2>\n            <h3>{this.state.selectedPlace.ratings}/5</h3>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\n//Higher Order Component that provides wrapper around Google APIs\n//Can be configured by passing a function that will be called with the wrapped component's props\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBFUHG2hhGRTX-FTfz3nwMMNPXKHvqGxZ8\"\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}