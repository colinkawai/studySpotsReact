{"ast":null,"code":"/**\n * Compares two path arrays of LatLng objects.\n */\nexport const arePathsEqual = function (pathA, pathB) {\n  if (pathA === pathB) {\n    return true;\n  }\n\n  if (!Array.isArray(pathA) || !Array.isArray(pathB)) {\n    return false;\n  }\n\n  if (pathA.length !== pathB.length) {\n    return false;\n  }\n\n  for (let i = 0; i < pathA.length; ++i) {\n    if (pathA[i] === pathB[i]) {\n      continue;\n    }\n\n    if (!isValidLatLng(pathA[i]) || !isValidLatLng(pathB[i])) {\n      return false;\n    }\n\n    if (pathB[i].lat !== pathA[i].lat || pathB[i].lng !== pathA[i].lng) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Helper that checks whether an array consists of objects\n * with lat and lng properties\n * @param {object} elem the element to check\n * @returns {boolean} whether or not it's valid\n */\n\nconst isValidLatLng = function (elem) {\n  return elem !== null && typeof elem === 'object' && elem.hasOwnProperty('lat') && elem.hasOwnProperty('lng');\n};","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/google-maps-react/src/lib/arePathsEqual.js"],"names":["arePathsEqual","pathA","pathB","Array","isArray","length","i","isValidLatLng","lat","lng","elem","hasOwnProperty"],"mappings":"AAAA;;;AAIA,OAAO,MAAMA,aAAa,GAAG,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AAClD,MAAID,KAAK,KAAKC,KAAd,EAAqB;AACnB,WAAO,IAAP;AACD;;AACD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAD,IAAyB,CAACE,KAAK,CAACC,OAAN,CAAcF,KAAd,CAA9B,EAAoD;AAClD,WAAO,KAAP;AACD;;AACD,MAAID,KAAK,CAACI,MAAN,KAAiBH,KAAK,CAACG,MAA3B,EAAmC;AACjC,WAAO,KAAP;AACD;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACI,MAA1B,EAAkC,EAAEC,CAApC,EAAuC;AACrC,QAAIL,KAAK,CAACK,CAAD,CAAL,KAAaJ,KAAK,CAACI,CAAD,CAAtB,EAA2B;AACzB;AACD;;AACD,QACE,CAACC,aAAa,CAACN,KAAK,CAACK,CAAD,CAAN,CAAd,IACA,CAACC,aAAa,CAACL,KAAK,CAACI,CAAD,CAAN,CAFhB,EAGE;AACA,aAAO,KAAP;AACD;;AACD,QACEJ,KAAK,CAACI,CAAD,CAAL,CAASE,GAAT,KAAiBP,KAAK,CAACK,CAAD,CAAL,CAASE,GAA1B,IACAN,KAAK,CAACI,CAAD,CAAL,CAASG,GAAT,KAAiBR,KAAK,CAACK,CAAD,CAAL,CAASG,GAF5B,EAGE;AACA,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CA5BM;AA8BP;;;;;;;AAMA,MAAMF,aAAa,GAAG,UAASG,IAAT,EAAe;AACnC,SACEA,IAAI,KAAK,IAAT,IACA,OAAOA,IAAP,KAAgB,QADhB,IAEAA,IAAI,CAACC,cAAL,CAAoB,KAApB,CAFA,IAGAD,IAAI,CAACC,cAAL,CAAoB,KAApB,CAJF;AAMD,CAPD","sourcesContent":["/**\n * Compares two path arrays of LatLng objects.\n */\n\nexport const arePathsEqual = function(pathA, pathB) {\n  if (pathA === pathB) {\n    return true;\n  }\n  if (!Array.isArray(pathA) || !Array.isArray(pathB)) {\n    return false;\n  }\n  if (pathA.length !== pathB.length) {\n    return false;\n  }\n  for (let i = 0; i < pathA.length; ++i) {\n    if (pathA[i] === pathB[i]) {\n      continue;\n    }\n    if (\n      !isValidLatLng(pathA[i]) ||\n      !isValidLatLng(pathB[i])\n    ) {\n      return false;\n    }\n    if (\n      pathB[i].lat !== pathA[i].lat ||\n      pathB[i].lng !== pathA[i].lng\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper that checks whether an array consists of objects\n * with lat and lng properties\n * @param {object} elem the element to check\n * @returns {boolean} whether or not it's valid\n */\nconst isValidLatLng = function(elem) {\n  return (\n    elem !== null &&\n    typeof elem === 'object' &&\n    elem.hasOwnProperty('lat') &&\n    elem.hasOwnProperty('lng')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}