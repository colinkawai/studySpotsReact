{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/components/MapContainer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport Map from \"../components/index.js\";\nimport axios from \"axios\";\nconst API_KEY = `${process.env.REACT_APP_API_KEY}`;\nexport class MapContainer extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => {\n      this.props.onMarkerClicked(props, marker, e);\n    };\n\n    this.onMapClicked = props => {\n      if (this.props.showingInfoWindow) {\n        this.props.onMapClicked;\n      }\n    };\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.getMapInfo = this.getMapInfo.bind(this);\n    this.centerMoved = this.centerMoved.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n  }\n\n  centerMoved(mapProps, map) {\n    this.props.centerMoved(mapProps, map);\n  } //after a location change call after recall the api\n  // using a setState callback (setState(updater, callback))\n\n\n  locationChange(lat, lng) {\n    this.props.handleLocationChange(lat, lng);\n  } // if a user clicks redo search in this area, call set state\n  // which will re render everything\n  // how to create event listeners for a component\n\n\n  render() {\n    const names = this.props.names;\n    const locations = this.props.locations;\n    const addresses = this.props.addresses;\n    const ratings = this.props.ratings;\n    var elements = [];\n\n    for (var i = 0; i < names.length; i++) {\n      elements.push(React.createElement(Marker, {\n        onClick: this.onMarkerClick,\n        title: names[i],\n        name: names[i],\n        position: {\n          lat: locations[i].latitude,\n          lng: locations[i].longitude\n        },\n        addresses: addresses[i],\n        ratings: ratings[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }));\n    } // loaded prop is from the GoogleApiComponent\n\n\n    return (//getting a reference to a google object\n      React.createElement(Map, {\n        centerAroundCurrentLocation: true,\n        google: this.props.google,\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          position: \"relative\"\n        },\n        className: \"map\",\n        zoom: 14,\n        onClick: this.onMapClicked,\n        onDragend: this.centerMoved,\n        onLocationChange: this.locationChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, elements, React.createElement(InfoWindow, {\n        marker: this.state.activeMarker,\n        visible: this.state.showingInfoWindow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.props.selectedPlace.title), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.props.selectedPlace.ratings, \"/5\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.props.selectedPlace.addresses))))\n    );\n  }\n\n}\nMapContainer.defaultProps = {\n  names: {},\n  locations: {},\n  addresses: {},\n  ratings: {}\n}; //Higher Order Component that provides wrapper around Google APIs\n//Can be configured by passing a function that will be called with the wrapped component's props\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBFUHG2hhGRTX-FTfz3nwMMNPXKHvqGxZ8\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/components/MapContainer.js"],"names":["React","Component","ReactDOM","GoogleApiWrapper","InfoWindow","Marker","Map","axios","API_KEY","process","env","REACT_APP_API_KEY","MapContainer","constructor","props","onMarkerClick","marker","e","onMarkerClicked","onMapClicked","showingInfoWindow","handleLocationChange","bind","getMapInfo","centerMoved","mapProps","map","locationChange","lat","lng","render","names","locations","addresses","ratings","elements","i","length","push","latitude","longitude","google","width","height","position","state","activeMarker","selectedPlace","title","defaultProps","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport Map from \"../components/index.js\";\nimport axios from \"axios\";\n\nconst API_KEY = `${process.env.REACT_APP_API_KEY}`;\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.getMapInfo = this.getMapInfo.bind(this);\n    this.centerMoved = this.centerMoved.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    this.props.onMarkerClicked(props, marker, e);\n  };\n\n  onMapClicked = props => {\n    if (this.props.showingInfoWindow) {\n      this.props.onMapClicked;\n    }\n  };\n\n  centerMoved(mapProps, map) {\n    this.props.centerMoved(mapProps, map);\n  }\n\n  //after a location change call after recall the api\n  // using a setState callback (setState(updater, callback))\n  locationChange(lat, lng) {\n    this.props.handleLocationChange(lat, lng);\n  }\n\n  // if a user clicks redo search in this area, call set state\n  // which will re render everything\n  // how to create event listeners for a component\n  render() {\n    const names = this.props.names;\n    const locations = this.props.locations;\n    const addresses = this.props.addresses;\n    const ratings = this.props.ratings;\n    var elements = [];\n    for (var i = 0; i < names.length; i++) {\n      elements.push(\n        <Marker\n          onClick={this.onMarkerClick}\n          title={names[i]}\n          name={names[i]}\n          position={{\n            lat: locations[i].latitude,\n            lng: locations[i].longitude\n          }}\n          addresses={addresses[i]}\n          ratings={ratings[i]}\n        />\n      );\n    }\n    // loaded prop is from the GoogleApiComponent\n    return (\n      //getting a reference to a google object\n      <Map\n        centerAroundCurrentLocation\n        google={this.props.google}\n        style={{ width: \"100%\", height: \"100%\", position: \"relative\" }}\n        className={\"map\"}\n        zoom={14}\n        onClick={this.onMapClicked}\n        onDragend={this.centerMoved}\n        onLocationChange={this.locationChange}\n      >\n        {elements}\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n        >\n          <div>\n            <h1>{this.props.selectedPlace.title}</h1>\n            <h2>{this.props.selectedPlace.ratings}/5</h2>\n            <h3>{this.props.selectedPlace.addresses}</h3>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nMapContainer.defaultProps = {\n  names: {},\n  locations: {},\n  addresses: {},\n  ratings: {}\n};\n\n//Higher Order Component that provides wrapper around Google APIs\n//Can be configured by passing a function that will be called with the wrapped component's props\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBFUHG2hhGRTX-FTfz3nwMMNPXKHvqGxZ8\"\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}