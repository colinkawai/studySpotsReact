{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { areBoundsEqual } from '../lib/areBoundsEqual';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'mouseout', 'mouseover'];\n\nconst wrappedPromise = function () {\n  var wrappedPromise = {},\n      promise = new Promise(function (resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n  wrappedPromise.then = promise.then.bind(promise);\n  wrappedPromise.catch = promise.catch.bind(promise);\n  wrappedPromise.promise = promise;\n  return wrappedPromise;\n};\n\nexport class Rectangle extends React.Component {\n  componentDidMount() {\n    this.rectanglePromise = wrappedPromise();\n    this.renderRectangle();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.map !== prevProps.map || !areBoundsEqual(this.props.bounds, prevProps.bounds)) {\n      if (this.rectangle) {\n        this.rectangle.setMap(null);\n      }\n\n      this.renderRectangle();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.rectangle) {\n      this.rectangle.setMap(null);\n    }\n  }\n\n  renderRectangle() {\n    const {\n      map,\n      google,\n      bounds,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      ...props\n    } = this.props;\n\n    if (!google) {\n      return null;\n    }\n\n    const params = {\n      map,\n      bounds,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      ...props\n    };\n    this.rectangle = new google.maps.Rectangle(params);\n    evtNames.forEach(e => {\n      this.rectangle.addListener(e, this.handleEvent(e));\n    });\n    this.rectanglePromise.resolve(this.rectangle);\n  }\n\n  getRectangle() {\n    return this.rectanglePromise;\n  }\n\n  handleEvent(evt) {\n    return e => {\n      const evtName = `on${camelize(evt)}`;\n\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.rectangle, e);\n      }\n    };\n  }\n\n  render() {\n    console.log('hii, ', this.props.bounds);\n    return null;\n  }\n\n}\nRectangle.propTypes = {\n  bounds: PropTypes.object,\n  strokeColor: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  strokeWeight: PropTypes.number,\n  fillColor: PropTypes.string,\n  fillOpacity: PropTypes.number\n};\nevtNames.forEach(e => Rectangle.propTypes[e] = PropTypes.func);\nRectangle.defaultProps = {\n  name: 'Rectangle'\n};\nexport default Rectangle;","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/google-maps-react/src/components/Rectangle.js"],"names":["React","PropTypes","areBoundsEqual","camelize","evtNames","wrappedPromise","promise","Promise","resolve","reject","then","bind","catch","Rectangle","Component","componentDidMount","rectanglePromise","renderRectangle","componentDidUpdate","prevProps","props","map","bounds","rectangle","setMap","componentWillUnmount","google","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","params","maps","forEach","e","addListener","handleEvent","getRectangle","evt","evtName","render","console","log","propTypes","object","string","number","func","defaultProps","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { areBoundsEqual } from '../lib/areBoundsEqual';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'mouseout', 'mouseover'];\n\nconst wrappedPromise = function() {\n    var wrappedPromise = {},\n        promise = new Promise(function (resolve, reject) {\n            wrappedPromise.resolve = resolve;\n            wrappedPromise.reject = reject;\n        });\n    wrappedPromise.then = promise.then.bind(promise);\n    wrappedPromise.catch = promise.catch.bind(promise);\n    wrappedPromise.promise = promise;\n\n    return wrappedPromise;\n}\n\nexport class Rectangle extends React.Component {\n  componentDidMount() {\n    this.rectanglePromise = wrappedPromise();\n    this.renderRectangle();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.map !== prevProps.map ||\n      !areBoundsEqual(this.props.bounds, prevProps.bounds)\n    ) {\n      if (this.rectangle) {\n        this.rectangle.setMap(null);\n      }\n      this.renderRectangle();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.rectangle) {\n      this.rectangle.setMap(null);\n    }\n  }\n\n  renderRectangle() {\n    const {\n      map,\n      google,\n      bounds,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      ...props\n    } = this.props;\n\n    if (!google) {\n        return null;\n    }\n\n    const params = {\n      map,\n      bounds,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      ...props\n    };\n\n    this.rectangle = new google.maps.Rectangle(params);\n\n    evtNames.forEach(e => {\n      this.rectangle.addListener(e, this.handleEvent(e));\n    });\n\n    this.rectanglePromise.resolve(this.rectangle);\n  }\n\n  getRectangle() {\n    return this.rectanglePromise;\n  }\n\n  handleEvent(evt) {\n    return (e) => {\n      const evtName = `on${camelize(evt)}`\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.rectangle, e);\n      }\n    }\n  }\n\n  render() {\n    console.log('hii, ', this.props.bounds);\n    return null;\n  }\n}\n\nRectangle.propTypes = {\n  bounds: PropTypes.object,\n  strokeColor: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  strokeWeight: PropTypes.number,\n  fillColor: PropTypes.string,\n  fillOpacity: PropTypes.number\n}\n\nevtNames.forEach(e => Rectangle.propTypes[e] = PropTypes.func)\n\nRectangle.defaultProps = {\n  name: 'Rectangle'\n}\n\nexport default Rectangle\n"]},"metadata":{},"sourceType":"module"}