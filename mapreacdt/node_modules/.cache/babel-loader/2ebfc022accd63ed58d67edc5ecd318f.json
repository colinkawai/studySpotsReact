{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { arePathsEqual } from '../lib/arePathsEqual';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'mouseout', 'mouseover'];\n\nconst wrappedPromise = function () {\n  var wrappedPromise = {},\n      promise = new Promise(function (resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n  wrappedPromise.then = promise.then.bind(promise);\n  wrappedPromise.catch = promise.catch.bind(promise);\n  wrappedPromise.promise = promise;\n  return wrappedPromise;\n};\n\nexport class Polygon extends React.Component {\n  componentDidMount() {\n    this.polygonPromise = wrappedPromise();\n    this.renderPolygon();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.map !== prevProps.map || !arePathsEqual(this.props.paths, prevProps.paths)) {\n      if (this.polygon) {\n        this.polygon.setMap(null);\n      }\n\n      this.renderPolygon();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.polygon) {\n      this.polygon.setMap(null);\n    }\n  }\n\n  renderPolygon() {\n    const {\n      map,\n      google,\n      paths,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      ...props\n    } = this.props;\n\n    if (!google) {\n      return null;\n    }\n\n    const params = {\n      map,\n      paths,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      ...props\n    };\n    this.polygon = new google.maps.Polygon(params);\n    evtNames.forEach(e => {\n      this.polygon.addListener(e, this.handleEvent(e));\n    });\n    this.polygonPromise.resolve(this.polygon);\n  }\n\n  getPolygon() {\n    return this.polygonPromise;\n  }\n\n  handleEvent(evt) {\n    return e => {\n      const evtName = `on${camelize(evt)}`;\n\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.polygon, e);\n      }\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n}\nPolygon.propTypes = {\n  paths: PropTypes.array,\n  strokeColor: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  strokeWeight: PropTypes.number,\n  fillColor: PropTypes.string,\n  fillOpacity: PropTypes.number\n};\nevtNames.forEach(e => Polygon.propTypes[e] = PropTypes.func);\nPolygon.defaultProps = {\n  name: 'Polygon'\n};\nexport default Polygon;","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/google-maps-react/src/components/Polygon.js"],"names":["React","PropTypes","arePathsEqual","camelize","evtNames","wrappedPromise","promise","Promise","resolve","reject","then","bind","catch","Polygon","Component","componentDidMount","polygonPromise","renderPolygon","componentDidUpdate","prevProps","props","map","paths","polygon","setMap","componentWillUnmount","google","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","params","maps","forEach","e","addListener","handleEvent","getPolygon","evt","evtName","render","propTypes","array","string","number","func","defaultProps","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { arePathsEqual } from '../lib/arePathsEqual';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'mouseout', 'mouseover'];\n\nconst wrappedPromise = function() {\n    var wrappedPromise = {},\n        promise = new Promise(function (resolve, reject) {\n            wrappedPromise.resolve = resolve;\n            wrappedPromise.reject = reject;\n        });\n    wrappedPromise.then = promise.then.bind(promise);\n    wrappedPromise.catch = promise.catch.bind(promise);\n    wrappedPromise.promise = promise;\n\n    return wrappedPromise;\n}\n\nexport class Polygon extends React.Component {\n  componentDidMount() {\n    this.polygonPromise = wrappedPromise();\n    this.renderPolygon();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.map !== prevProps.map ||\n      !arePathsEqual(this.props.paths, prevProps.paths)\n    ) {\n      if (this.polygon) {\n        this.polygon.setMap(null);\n      }\n      this.renderPolygon();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.polygon) {\n      this.polygon.setMap(null);\n    }\n  }\n\n  renderPolygon() {\n    const {\n      map,\n      google,\n      paths,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      ...props\n    } = this.props;\n\n    if (!google) {\n        return null;\n    }\n\n    const params = {\n      map,\n      paths,\n      strokeColor,\n      strokeOpacity,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      ...props\n    };\n\n    this.polygon = new google.maps.Polygon(params);\n\n    evtNames.forEach(e => {\n      this.polygon.addListener(e, this.handleEvent(e));\n    });\n\n    this.polygonPromise.resolve(this.polygon);\n  }\n\n  getPolygon() {\n    return this.polygonPromise;\n  }\n\n  handleEvent(evt) {\n    return (e) => {\n      const evtName = `on${camelize(evt)}`\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.polygon, e);\n      }\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nPolygon.propTypes = {\n  paths: PropTypes.array,\n  strokeColor: PropTypes.string,\n  strokeOpacity: PropTypes.number,\n  strokeWeight: PropTypes.number,\n  fillColor: PropTypes.string,\n  fillOpacity: PropTypes.number\n}\n\nevtNames.forEach(e => Polygon.propTypes[e] = PropTypes.func)\n\nPolygon.defaultProps = {\n  name: 'Polygon'\n}\n\nexport default Polygon\n"]},"metadata":{},"sourceType":"module"}