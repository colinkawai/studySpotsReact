{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport { MapContainer } from \"./components/MapContainer\";\nimport axios from \"axios\";\nexport class Container extends React.Component {\n  constructor(_props) {\n    //state from map needs to live up here\n    super(_props);\n\n    this.handleOnMarkerClick = (props, marker, e) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n    };\n\n    this.handleOnMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      addresses: [],\n      locations: [],\n      names: [],\n      hours: [],\n      ratings: [],\n      currentLocation: {\n        lat: \"\",\n        lng: \"\"\n      }\n    };\n  }\n\n  handleCenterMoved(mapProps, map) {\n    this.setState({\n      currentLocation: {\n        lat: map.center.lat(),\n        lng: map.center.lng()\n      }\n    }, () => {\n      this.getMapInfo();\n    });\n  }\n\n  handleLocationChange(lat, lng) {\n    this.setState({\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    }, () => {\n      this.getMapInfo();\n    });\n  }\n\n  getMapInfo() {\n    axios.get(`${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?`, {\n      headers: {\n        Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n      },\n      params: {\n        categories: \"coffee, libraries\",\n        latitude: this.state.currentLocation.lat,\n        longitude: this.state.currentLocation.lng,\n        limit: 50\n      }\n    }) // set state for locations, names\n    .then(res => {\n      for (var key in res.data.businesses) {\n        var addressesBase = res.data.businesses[key].location;\n        this.setState({\n          locations: this.state.locations.concat(res.data.businesses[key].coordinates),\n          names: this.state.names.concat(res.data.businesses[key].name),\n          ratings: this.state.ratings.concat(res.data.businesses[key].rating),\n          addresses: this.state.addresses.concat(\"\" + addressesBase.address1 + \" \" + addressesBase.city + \",\" + addressesBase.state + \" \" + addressesBase.zip_code)\n        });\n      }\n    }).catch(err => {\n      console.log(\"Yelp API call error\");\n    });\n  }\n\n  render() {\n    const names = this.state.names;\n    const locations = this.state.locations;\n    const addresses = this.state.addresses;\n    const ratings = this.state.ratings;\n    return React.createElement(MapContainer, {\n      names: names,\n      locations: locations,\n      addresses: addresses,\n      ratings: ratings,\n      onMapClicked: this.handleOnMapClicked,\n      onMarkerClicked: this.handleOnMarkerClick,\n      centerMoved: this.handleCenterMoved,\n      handleLocationChange: this.handleLocationChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    });\n  }\n\n}\nexport default Container;","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/App.js"],"names":["React","ReactDOM","GoogleApiWrapper","InfoWindow","Marker","MapContainer","axios","Container","Component","constructor","props","handleOnMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","handleOnMapClicked","state","addresses","locations","names","hours","ratings","currentLocation","lat","lng","handleCenterMoved","mapProps","map","center","getMapInfo","handleLocationChange","get","headers","Authorization","process","env","REACT_APP_API_KEY","params","categories","latitude","longitude","limit","then","res","key","data","businesses","addressesBase","location","concat","coordinates","name","rating","address1","city","zip_code","catch","err","console","log","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport { MapContainer } from \"./components/MapContainer\";\nimport axios from \"axios\";\n\nexport class Container extends React.Component {\n  constructor(props) {\n    //state from map needs to live up here\n    super(props);\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      addresses: [],\n      locations: [],\n      names: [],\n      hours: [],\n      ratings: [],\n      currentLocation: {\n        lat: \"\",\n        lng: \"\"\n      }\n    };\n  }\n\n  handleOnMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  };\n\n  handleOnMapClicked = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  handleCenterMoved(mapProps, map) {\n    this.setState(\n      {\n        currentLocation: {\n          lat: map.center.lat(),\n          lng: map.center.lng()\n        }\n      },\n      () => {\n        this.getMapInfo();\n      }\n    );\n  }\n\n  handleLocationChange(lat, lng) {\n    this.setState(\n      {\n        currentLocation: {\n          lat: lat,\n          lng: lng\n        }\n      },\n      () => {\n        this.getMapInfo();\n      }\n    );\n  }\n\n  getMapInfo() {\n    axios\n      .get(\n        `${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?`,\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n          },\n          params: {\n            categories: \"coffee, libraries\",\n            latitude: this.state.currentLocation.lat,\n            longitude: this.state.currentLocation.lng,\n            limit: 50\n          }\n        }\n      )\n      // set state for locations, names\n      .then(res => {\n        for (var key in res.data.businesses) {\n          var addressesBase = res.data.businesses[key].location;\n          this.setState({\n            locations: this.state.locations.concat(\n              res.data.businesses[key].coordinates\n            ),\n            names: this.state.names.concat(res.data.businesses[key].name),\n            ratings: this.state.ratings.concat(res.data.businesses[key].rating),\n            addresses: this.state.addresses.concat(\n              \"\" +\n                addressesBase.address1 +\n                \" \" +\n                addressesBase.city +\n                \",\" +\n                addressesBase.state +\n                \" \" +\n                addressesBase.zip_code\n            )\n          });\n        }\n      })\n      .catch(err => {\n        console.log(\"Yelp API call error\");\n      });\n  }\n\n  render() {\n    const names = this.state.names;\n    const locations = this.state.locations;\n    const addresses = this.state.addresses;\n    const ratings = this.state.ratings;\n    return (\n      <MapContainer\n        names={names}\n        locations={locations}\n        addresses={addresses}\n        ratings={ratings}\n        onMapClicked={this.handleOnMapClicked}\n        onMarkerClicked={this.handleOnMarkerClick}\n        centerMoved={this.handleCenterMoved}\n        handleLocationChange={this.handleLocationChange}\n      />\n    );\n  }\n}\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}