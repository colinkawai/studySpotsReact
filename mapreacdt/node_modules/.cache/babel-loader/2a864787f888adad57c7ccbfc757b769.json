{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/Map.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Loading Map...\"), this.renderChildren());\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n      let {\n        zoom\n      } = this.props;\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      });\n      this.maps = new maps.Map(node, mapConfig);\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n}\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/Map.js"],"names":["React","ReactDOM","mapStyles","map","position","width","height","CurrentLocation","Component","constructor","props","lat","lng","initialCenter","state","currentLocation","render","style","Object","assign","renderChildren","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","children","Children","c","cloneElement","mapCenter","maps","mapRef","refs","node","findDOMNode","zoom","center","LatLng","mapConfig","Map","current","panTo","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading Map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      this.maps = new maps.Map(node, mapConfig);\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n"]},"metadata":{},"sourceType":"module"}