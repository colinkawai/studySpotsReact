{"ast":null,"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport ReactDOMServer from \"react-dom/server\";\nexport class InfoWindow extends React.Component {\n  componentDidMount() {\n    this.renderInfoWindow();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      google,\n      map\n    } = this.props;\n\n    if (!google || !map) {\n      return;\n    }\n\n    if (map !== prevProps.map) {\n      this.renderInfoWindow();\n    }\n\n    if (this.props.position !== prevProps.position) {\n      this.updatePosition();\n    }\n\n    if (this.props.children !== prevProps.children) {\n      this.updateContent();\n    }\n\n    if (this.props.visible !== prevProps.visible || this.props.marker !== prevProps.marker || this.props.position !== prevProps.position) {\n      this.props.visible ? this.openWindow() : this.closeWindow();\n    }\n  }\n\n  renderInfoWindow() {\n    const {\n      map,\n      google,\n      mapCenter,\n      ...props\n    } = this.props;\n\n    if (!google || !google.maps) {\n      return;\n    }\n\n    const iw = this.infowindow = new google.maps.InfoWindow({\n      content: \"\",\n      ...props\n    });\n    google.maps.event.addListener(iw, \"closeclick\", this.onClose.bind(this));\n    google.maps.event.addListener(iw, \"domready\", this.onOpen.bind(this));\n  }\n\n  onOpen() {\n    if (this.props.onOpen) {\n      this.props.onOpen();\n    }\n  }\n\n  onClose() {\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n  }\n\n  openWindow() {\n    this.infowindow.open(this.props.map, this.props.marker);\n  }\n\n  updatePosition() {\n    let pos = this.props.position;\n\n    if (!(pos instanceof window.google.maps.LatLng)) {\n      pos = pos && new window.google.maps.LatLng(pos.lat, pos.lng);\n    }\n\n    this.infowindow.setPosition(pos);\n  }\n\n  updateContent() {\n    const content = this.renderChildren();\n    this.infowindow.setContent(content);\n  }\n\n  closeWindow() {\n    this.infowindow.close();\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    return ReactDOMServer.renderToString(children);\n  }\n\n  render() {\n    return null;\n  }\n\n}\nInfoWindow.propTypes = {\n  children: PropTypes.element.isRequired,\n  map: PropTypes.object,\n  marker: PropTypes.object,\n  position: PropTypes.object,\n  visible: PropTypes.bool,\n  // callbacks\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func\n};\nInfoWindow.defaultProps = {\n  visible: false\n};\nexport default InfoWindow;","map":{"version":3,"sources":["/Users/colinkawai/studySpotsReact/mapreacdt/src/components/InfoWindow.js"],"names":["React","PropTypes","ReactDOM","ReactDOMServer","InfoWindow","Component","componentDidMount","renderInfoWindow","componentDidUpdate","prevProps","google","map","props","position","updatePosition","children","updateContent","visible","marker","openWindow","closeWindow","mapCenter","maps","iw","infowindow","content","event","addListener","onClose","bind","onOpen","open","pos","window","LatLng","lat","lng","setPosition","renderChildren","setContent","close","renderToString","render","propTypes","element","isRequired","object","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport ReactDOMServer from \"react-dom/server\";\n\nexport class InfoWindow extends React.Component {\n  componentDidMount() {\n    this.renderInfoWindow();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { google, map } = this.props;\n\n    if (!google || !map) {\n      return;\n    }\n\n    if (map !== prevProps.map) {\n      this.renderInfoWindow();\n    }\n\n    if (this.props.position !== prevProps.position) {\n      this.updatePosition();\n    }\n\n    if (this.props.children !== prevProps.children) {\n      this.updateContent();\n    }\n\n    if (\n      this.props.visible !== prevProps.visible ||\n      this.props.marker !== prevProps.marker ||\n      this.props.position !== prevProps.position\n    ) {\n      this.props.visible ? this.openWindow() : this.closeWindow();\n    }\n  }\n\n  renderInfoWindow() {\n    const { map, google, mapCenter, ...props } = this.props;\n\n    if (!google || !google.maps) {\n      return;\n    }\n\n    const iw = (this.infowindow = new google.maps.InfoWindow({\n      content: \"\",\n      ...props\n    }));\n\n    google.maps.event.addListener(iw, \"closeclick\", this.onClose.bind(this));\n    google.maps.event.addListener(iw, \"domready\", this.onOpen.bind(this));\n  }\n\n  onOpen() {\n    if (this.props.onOpen) {\n      this.props.onOpen();\n    }\n  }\n\n  onClose() {\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n  }\n\n  openWindow() {\n    this.infowindow.open(this.props.map, this.props.marker);\n  }\n\n  updatePosition() {\n    let pos = this.props.position;\n    if (!(pos instanceof window.google.maps.LatLng)) {\n      pos = pos && new window.google.maps.LatLng(pos.lat, pos.lng);\n    }\n    this.infowindow.setPosition(pos);\n  }\n\n  updateContent() {\n    const content = this.renderChildren();\n    this.infowindow.setContent(content);\n  }\n\n  closeWindow() {\n    this.infowindow.close();\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n    return ReactDOMServer.renderToString(children);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nInfoWindow.propTypes = {\n  children: PropTypes.element.isRequired,\n  map: PropTypes.object,\n  marker: PropTypes.object,\n  position: PropTypes.object,\n  visible: PropTypes.bool,\n\n  // callbacks\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func\n};\n\nInfoWindow.defaultProps = {\n  visible: false\n};\n\nexport default InfoWindow;\n"]},"metadata":{},"sourceType":"module"}