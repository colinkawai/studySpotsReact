{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/Map.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport makeCancelable from \"make-cancelable\";\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  render() {\n    const style = {\n      width: \"100vw\",\n      height: \"100vh\"\n    };\n    return React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Loading Map...\");\n  } // the case when the map is first loaded\n  // cannot depend upon the google api being avaliable when the component is first loaded\n  // if component is loaded without it the google prop will be undefined\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    } // recenterMap is called when the currentLocation in the component's state is updated\n\n  } // this would happen whenever our map has already been loaded previously in our app\n\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        this.geoPromise = makeCancelable(new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(resolve, reject);\n        }));\n        this.geoPromise.promise.then(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        }).catch(e => e);\n      }\n    }\n\n    this.loadMap();\n  } //called when there is a DOM component on the page\n  //need to grab the refrence to the DOM component\n\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef); //instantiate a google map object on our page\n      // pulling from state and not props\n\n      let {\n        initialCenter,\n        zoom\n      } = this.props;\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // constructor accepts a DOM node\n      // and a configuration object to create a map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n}\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  initialCenter: PropTypes.object,\n  centerAroundCurrentLocation: PropTypes.bool\n}; //convert loadmap function to use these variables from this.props\n\nMap.defaultProps = {\n  zoom: 13,\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\nexport default Map;\n/*\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocaiton: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  //is invoked immediatley after updating occurs. Not called for initial render\n  // good place to do network requests\n  componentDidUpdate(prevProps, prevState) {\n    //need to check if the map is loaded\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    //check if browser's current location is provided\n    if (prevState.currentLocaiton !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  // instance when map is already loaded\n  // invoked immediatley after a component is mounted\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      // what is setting centerAroundCurrentLocation to true\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocaiton: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  //only called after the component has been rendered\n  //and grabs a reference from the DOM component to where we want out map to be placed\n  loadMap() {\n    if (this.props && this.props.google) {\n      // check if google is avaliable\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      //reference to the DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocaiton;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // maps.Map() is constructor that instantiates the map\n      this.maps = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocaiton\n      });\n    });\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map ...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n*/","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/Map.js"],"names":["React","ReactDOM","PropTypes","makeCancelable","Map","Component","constructor","props","lat","lng","initialCenter","state","currentLocation","render","style","width","height","componentDidUpdate","prevProps","prevState","google","loadMap","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","geoPromise","Promise","resolve","reject","getCurrentPosition","promise","then","pos","coords","setState","latitude","longitude","catch","e","maps","mapRef","refs","map","node","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","propTypes","object","number","bool","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport makeCancelable from \"make-cancelable\";\n\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  render() {\n    const style = {\n      width: \"100vw\",\n      height: \"100vh\"\n    };\n    return (\n      <div style={style} ref=\"map\">\n        Loading Map...\n      </div>\n    );\n  }\n  // the case when the map is first loaded\n  // cannot depend upon the google api being avaliable when the component is first loaded\n  // if component is loaded without it the google prop will be undefined\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    // recenterMap is called when the currentLocation in the component's state is updated\n  }\n\n  // this would happen whenever our map has already been loaded previously in our app\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        this.geoPromise = makeCancelable(\n          new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition(resolve, reject);\n          })\n        );\n\n        this.geoPromise.promise\n          .then(pos => {\n            const coords = pos.coords;\n            this.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude\n              }\n            });\n          })\n          .catch(e => e);\n      }\n    }\n    this.loadMap();\n  }\n\n  //called when there is a DOM component on the page\n  //need to grab the refrence to the DOM component\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      //instantiate a google map object on our page\n      // pulling from state and not props\n      let { initialCenter, zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // constructor accepts a DOM node\n      // and a configuration object to create a map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n}\n\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  initialCenter: PropTypes.object,\n  centerAroundCurrentLocation: PropTypes.bool\n};\n//convert loadmap function to use these variables from this.props\nMap.defaultProps = {\n  zoom: 13,\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n\nexport default Map;\n/*\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocaiton: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  //is invoked immediatley after updating occurs. Not called for initial render\n  // good place to do network requests\n  componentDidUpdate(prevProps, prevState) {\n    //need to check if the map is loaded\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    //check if browser's current location is provided\n    if (prevState.currentLocaiton !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  // instance when map is already loaded\n  // invoked immediatley after a component is mounted\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      // what is setting centerAroundCurrentLocation to true\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocaiton: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  //only called after the component has been rendered\n  //and grabs a reference from the DOM component to where we want out map to be placed\n  loadMap() {\n    if (this.props && this.props.google) {\n      // check if google is avaliable\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      //reference to the DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocaiton;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // maps.Map() is constructor that instantiates the map\n      this.maps = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocaiton\n      });\n    });\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map ...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n*/\n"]},"metadata":{},"sourceType":"module"}