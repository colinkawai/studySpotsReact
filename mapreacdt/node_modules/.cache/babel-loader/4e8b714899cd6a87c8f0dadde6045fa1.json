{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/components/GoogleApiComponent.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ScriptCache } from \"../lib/ScriptCache\";\nimport GoogleApi from \"../lib/GoogleApi\";\nconst defaultMapConfig = {};\n\nconst serialize = obj => JSON.stringify(obj);\n\nconst isSame = (obj1, obj2) => obj1 === obj2 || serialize(obj1) === serialize(obj2);\n\nconst defaultCreateCache = options => {\n  options = options || {};\n  const apiKey = options.apiKey;\n  const libraries = options.libraries || [\"places\"];\n  const version = options.version || \"3\";\n  const language = options.language || \"en\";\n  const url = options.url;\n  const client = options.client;\n  const region = options.region;\n  return ScriptCache({\n    google: GoogleApi({\n      apiKey: apiKey,\n      language: language,\n      libraries: libraries,\n      version: version,\n      url: url,\n      client: client,\n      region: region\n    })\n  });\n};\n\nconst DefaultLoadingContainer = props => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, \"Loading...\");\n\nexport const wrapper = input => WrappedComponent => {\n  class Wrapper extends React.Component {\n    constructor(props, context) {\n      super(props, context); // Build options from input\n\n      const options = typeof input === \"function\" ? input(props) : input; // Initialize required Google scripts and other configured options\n\n      this.initialize(options);\n      this.state = {\n        loaded: false,\n        map: null,\n        google: null,\n        options: options\n      };\n      this.mapRef = React.createRef();\n    }\n\n    UNSAFE_componentWillReceiveProps(props) {\n      // Do not update input if it's not dynamic\n      if (typeof input !== \"function\") {\n        return;\n      } // Get options to compare\n\n\n      const prevOptions = this.state.options;\n      const options = typeof input === \"function\" ? input(props) : input; // Ignore when options are not changed\n\n      if (isSame(options, prevOptions)) {\n        return;\n      } // Initialize with new options\n\n\n      this.initialize(options); // Save new options in component state,\n      // and remove information about previous API handlers\n\n      this.setState({\n        options: options,\n        loaded: false,\n        google: null\n      });\n    }\n\n    initialize(options) {\n      // Avoid race condition: remove previous 'load' listener\n      if (this.unregisterLoadHandler) {\n        this.unregisterLoadHandler();\n        this.unregisterLoadHandler = null;\n      } // Load cache factory\n\n\n      const createCache = options.createCache || defaultCreateCache; // Build script\n\n      this.scriptCache = createCache(options);\n      this.unregisterLoadHandler = this.scriptCache.google.onLoad(this.onLoad.bind(this)); // Store information about loading container\n\n      this.LoadingContainer = options.LoadingContainer || DefaultLoadingContainer;\n    }\n\n    onLoad(err, tag) {\n      this._gapi = window.google;\n      this.setState({\n        loaded: true,\n        google: this._gapi\n      });\n    }\n\n    render() {\n      const {\n        LoadingContainer\n      } = this;\n\n      if (!this.state.loaded) {\n        return React.createElement(LoadingContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        });\n      }\n\n      const props = Object.assign({}, this.props, {\n        loaded: this.state.loaded,\n        google: window.google\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(WrappedComponent, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        ref: this.mapRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  return Wrapper;\n};\nexport default wrapper;","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/components/GoogleApiComponent.js"],"names":["React","ReactDOM","ScriptCache","GoogleApi","defaultMapConfig","serialize","obj","JSON","stringify","isSame","obj1","obj2","defaultCreateCache","options","apiKey","libraries","version","language","url","client","region","google","DefaultLoadingContainer","props","wrapper","input","WrappedComponent","Wrapper","Component","constructor","context","initialize","state","loaded","map","mapRef","createRef","UNSAFE_componentWillReceiveProps","prevOptions","setState","unregisterLoadHandler","createCache","scriptCache","onLoad","bind","LoadingContainer","err","tag","_gapi","window","render","Object","assign"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ScriptCache } from \"../lib/ScriptCache\";\nimport GoogleApi from \"../lib/GoogleApi\";\n\nconst defaultMapConfig = {};\n\nconst serialize = obj => JSON.stringify(obj);\nconst isSame = (obj1, obj2) =>\n  obj1 === obj2 || serialize(obj1) === serialize(obj2);\n\nconst defaultCreateCache = options => {\n  options = options || {};\n  const apiKey = options.apiKey;\n  const libraries = options.libraries || [\"places\"];\n  const version = options.version || \"3\";\n  const language = options.language || \"en\";\n  const url = options.url;\n  const client = options.client;\n  const region = options.region;\n\n  return ScriptCache({\n    google: GoogleApi({\n      apiKey: apiKey,\n      language: language,\n      libraries: libraries,\n      version: version,\n      url: url,\n      client: client,\n      region: region\n    })\n  });\n};\n\nconst DefaultLoadingContainer = props => <div>Loading...</div>;\n\nexport const wrapper = input => WrappedComponent => {\n  class Wrapper extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n\n      // Build options from input\n      const options = typeof input === \"function\" ? input(props) : input;\n\n      // Initialize required Google scripts and other configured options\n      this.initialize(options);\n\n      this.state = {\n        loaded: false,\n        map: null,\n        google: null,\n        options: options\n      };\n\n      this.mapRef = React.createRef();\n    }\n\n    UNSAFE_componentWillReceiveProps(props) {\n      // Do not update input if it's not dynamic\n      if (typeof input !== \"function\") {\n        return;\n      }\n\n      // Get options to compare\n      const prevOptions = this.state.options;\n      const options = typeof input === \"function\" ? input(props) : input;\n\n      // Ignore when options are not changed\n      if (isSame(options, prevOptions)) {\n        return;\n      }\n\n      // Initialize with new options\n      this.initialize(options);\n\n      // Save new options in component state,\n      // and remove information about previous API handlers\n      this.setState({\n        options: options,\n        loaded: false,\n        google: null\n      });\n    }\n\n    initialize(options) {\n      // Avoid race condition: remove previous 'load' listener\n      if (this.unregisterLoadHandler) {\n        this.unregisterLoadHandler();\n        this.unregisterLoadHandler = null;\n      }\n\n      // Load cache factory\n      const createCache = options.createCache || defaultCreateCache;\n\n      // Build script\n      this.scriptCache = createCache(options);\n      this.unregisterLoadHandler = this.scriptCache.google.onLoad(\n        this.onLoad.bind(this)\n      );\n\n      // Store information about loading container\n      this.LoadingContainer =\n        options.LoadingContainer || DefaultLoadingContainer;\n    }\n\n    onLoad(err, tag) {\n      this._gapi = window.google;\n\n      this.setState({ loaded: true, google: this._gapi });\n    }\n\n    render() {\n      const { LoadingContainer } = this;\n      if (!this.state.loaded) {\n        return <LoadingContainer />;\n      }\n\n      const props = Object.assign({}, this.props, {\n        loaded: this.state.loaded,\n        google: window.google\n      });\n\n      return (\n        <div>\n          <WrappedComponent {...props} />\n          <div ref={this.mapRef} />\n        </div>\n      );\n    }\n  }\n\n  return Wrapper;\n};\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}