{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/studySpotsReact/mapreacdt/src/App.js\";\nimport React, { Component } from \"react\";\nimport MapContainer from \"./components/MapContainer\";\nimport axios from \"axios\";\nimport ViewList from \"./components/ViewList\";\nimport \"./App.css\";\nimport { disableBodyScroll, enableBodyScroll, clearAllBodyScrollLocks } from \"body-scroll-lock\";\nimport { filter } from \"async\";\nexport class Container extends React.Component {\n  //modal variabales\n  constructor(_props) {\n    //state from map needs to live up here\n    super(_props);\n    this.targetElement = null;\n\n    this.onMarkerClick = (props, marker, e) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n    };\n\n    this.handleOnMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.handleFilters = async filterArray => {\n      let paramArray = await this.getMapInfo(filterArray);\n      let filteredArray = await this.filterPlaces(filterArray, paramArray);\n      let removedArray = await this.removePlaces(filteredArray, paramArray);\n      this.filterFinal(removedArray);\n    };\n\n    this.getMapInfo = filterArray => {\n      var paramArray = [];\n      var locationArr = [];\n      var namesArr = [];\n      var ratingsArr = [];\n      var addressesArr = [];\n      var placeIDArr = [];\n      axios.get(`${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?`, {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n        },\n        params: {\n          categories: \"coffee, libraries\",\n          latitude: this.state.currentLocation.lat,\n          longitude: this.state.currentLocation.lng,\n          limit: 20\n        }\n      }) // set state for locations, names\n      .then(res => {\n        for (var key in res.data.businesses) {\n          var addressesBase = res.data.businesses[key].location;\n          locationArr.push(res.data.businesses[key].coordinates);\n          placeIDArr.push(res.data.businesses[key].id);\n          namesArr.push(res.data.businesses[key].name);\n          ratingsArr.push(res.data.businesses[key].rating);\n          addressesArr.push(\"\" + addressesBase.address1 + \" \" + addressesBase.city + \", \" + addressesBase.state + \" \" + addressesBase.zip_code);\n        }\n\n        paramArray.push(placeIDArr);\n        paramArray.push(locationArr);\n        paramArray.push(namesArr);\n        paramArray.push(ratingsArr);\n        paramArray.push(addressesArr);\n      }).catch(err => {\n        console.log(\"Yelp API call error\");\n      });\n\n      if (filterArray !== undefined) {\n        return new Promise((resolve, reject) => {\n          resolve(paramArray);\n        });\n      } else {\n        console.log(locationsArr);\n        this.setState({\n          placeID: placeIDArr,\n          locations: locationArr,\n          names: namesArr,\n          ratings: ratingsArr,\n          addresses: addressesArr\n        });\n      }\n    };\n\n    this.filterFinal = removedArray => {\n      // call another function here that applies those parameters\n      placeIDArr = removedArray[0];\n      locationsArr = removedArray[1];\n      namesArr = removedArray[2];\n      ratingsArr = removedArray[3];\n      addressesArr = removedArray[4];\n      this.setState({\n        placeID: placeIDArr,\n        locations: locationArr,\n        names: namesArr,\n        ratings: ratingsArr,\n        addresses: addressesArr\n      });\n    };\n\n    this.filterPlaces = (filterArray, paramArray) => {\n      // have viewList send the filters in an array\n      // get request to the database and put the list of placeIDs in a list that excludes those places\n      // update the state\n      const placeIDArr = paramArray[0];\n      let removeArray = [];\n\n      for (let i = 0; i < placeIDArr.length; i++) {\n        const getString = \"http://localhost:3001/api/getDataAverage/\" + placeIDArr[i];\n        axios.get(getString).then(res => {\n          let resArray = [res.data.data[0].averageSeatRating, res.data.data[0].averageComfortRating, res.data.data[0].averageInternetRating, res.data.data[0].averageNoiseRating, res.data.data[0].averageOutletRating]; // push the indexes\n\n          for (let j = 0; j < resArray.length; j++) {\n            if (resArray[j] < filterArray[j]) {\n              removeArray.push(i);\n              break;\n            }\n          } //  console.log(removeArray);\n          // console.log(removeArray.length);\n\n        }).catch(err => {\n          console.log(err);\n        });\n      } //console.log(removeArray);\n      //console.log(removeArray.length);\n\n\n      return new Promise((resolve, reject) => {\n        resolve(removeArray);\n      });\n    };\n\n    this.removePlaces = (removeArray, paramArray) => {\n      let placeIDCopy = paramArray[0];\n      let locationArrayCopy = paramArray[1];\n      let namesCopy = paramArray[2];\n      let ratingsCopy = paramArray[3];\n      let addressesCopy = paramArray[4];\n      let i = removeArray.length;\n      console.log(removeArray);\n      console.log(i);\n\n      while (i--) {\n        console.log(\"here\");\n        locationArrayCopy.splice(removeArray[i], 1);\n        placeIDCopy.splice(removeArray[i], 1);\n        namesCopy.splice(removeArray[i], 1);\n        ratingsCopy.splice(removeArray[i], 1);\n        addressesCopy.splice(removeArray[i], 1);\n      }\n\n      let returnArray = [placeIDCopy, locationArrayCopy, namesCopy, ratingsCopy, addressesCopy]; //console.log(returnArray);\n\n      return new Promise((resolve, reject) => {\n        resolve(returnArray);\n      });\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      show: false,\n      activeMarker: {},\n      selectedPlace: {},\n      addresses: [],\n      locations: [],\n      names: [],\n      placeID: [],\n      hours: [],\n      ratings: [],\n      currentLocation: {\n        lat: \"\",\n        lng: \"\"\n      }\n    };\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.handleOnMapClicked = this.handleOnMapClicked.bind(this);\n    this.handleCenterMoved = this.handleCenterMoved.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.filterPlaces = this.filterPlaces.bind(this);\n    this.removePlaces = this.removePlaces.bind(this);\n  }\n\n  componentDidMount() {\n    this.targetElement = document.querySelector(\"#listView\");\n    disableBodyScroll(this.targetElement);\n  }\n\n  handleCenterMoved(mapProps, map) {\n    this.setState({\n      currentLocation: {\n        lat: map.center.lat(),\n        lng: map.center.lng()\n      }\n    }, () => {\n      this.getMapInfo();\n    });\n  }\n\n  handleLocationChange(lat, lng) {\n    this.setState({\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    }, () => {\n      this.getMapInfo();\n    });\n  }\n\n  // have the filters as states. And pass thsoe states off to ViewList to create\n  // a call to the database\n  render() {\n    const names = this.state.names;\n    const locations = this.state.locations;\n    const addresses = this.state.addresses;\n    const ratings = this.state.ratings;\n    const activeMarker = this.state.activeMarker;\n    const showingInfoWindow = this.state.showingInfoWindow;\n    const selectedPlace = this.state.selectedPlace;\n    const placeID = this.state.placeID;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \" Study Spots\"), React.createElement(\"div\", {\n      className: \"mapListContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(ViewList, {\n      className: \"ViewList\",\n      id: \"listView\",\n      names: names,\n      locations: locations,\n      addresses: addresses,\n      ratings: ratings,\n      placeID: placeID,\n      onFilter: this.handleFilters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(MapContainer, {\n      className: \"mapContainer\",\n      names: names,\n      locations: locations,\n      addresses: addresses,\n      ratings: ratings,\n      activeMarker: activeMarker,\n      showingInfoWindow: showingInfoWindow,\n      selectedPlace: selectedPlace,\n      onMapClicked: this.handleOnMapClicked,\n      onMarkerClick: this.onMarkerClick,\n      centerMoved: this.handleCenterMoved,\n      handleLocationChange: this.handleLocationChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    })));\n  }\n\n}\nexport default Container;","map":{"version":3,"sources":["/Users/colinkawai/studySpotsReact/mapreacdt/src/App.js"],"names":["React","Component","MapContainer","axios","ViewList","disableBodyScroll","enableBodyScroll","clearAllBodyScrollLocks","filter","Container","constructor","props","targetElement","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","handleOnMapClicked","state","handleFilters","filterArray","paramArray","getMapInfo","filteredArray","filterPlaces","removedArray","removePlaces","filterFinal","locationArr","namesArr","ratingsArr","addressesArr","placeIDArr","get","headers","Authorization","process","env","REACT_APP_API_KEY","params","categories","latitude","currentLocation","lat","longitude","lng","limit","then","res","key","data","businesses","addressesBase","location","push","coordinates","id","name","rating","address1","city","zip_code","catch","err","console","log","undefined","Promise","resolve","reject","locationsArr","placeID","locations","names","ratings","addresses","removeArray","i","length","getString","resArray","averageSeatRating","averageComfortRating","averageInternetRating","averageNoiseRating","averageOutletRating","j","placeIDCopy","locationArrayCopy","namesCopy","ratingsCopy","addressesCopy","splice","returnArray","show","hours","bind","handleCenterMoved","handleLocationChange","componentDidMount","document","querySelector","mapProps","map","center","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport MapContainer from \"./components/MapContainer\";\nimport axios from \"axios\";\nimport ViewList from \"./components/ViewList\";\n\nimport \"./App.css\";\nimport {\n  disableBodyScroll,\n  enableBodyScroll,\n  clearAllBodyScrollLocks\n} from \"body-scroll-lock\";\nimport { filter } from \"async\";\n\nexport class Container extends React.Component {\n  targetElement = null;\n  //modal variabales\n\n  constructor(props) {\n    //state from map needs to live up here\n    super(props);\n\n    this.state = {\n      showingInfoWindow: false,\n      show: false,\n      activeMarker: {},\n      selectedPlace: {},\n      addresses: [],\n      locations: [],\n      names: [],\n      placeID: [],\n      hours: [],\n      ratings: [],\n      currentLocation: {\n        lat: \"\",\n        lng: \"\"\n      }\n    };\n\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.handleOnMapClicked = this.handleOnMapClicked.bind(this);\n    this.handleCenterMoved = this.handleCenterMoved.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.filterPlaces = this.filterPlaces.bind(this);\n    this.removePlaces = this.removePlaces.bind(this);\n  }\n\n  componentDidMount() {\n    this.targetElement = document.querySelector(\"#listView\");\n    disableBodyScroll(this.targetElement);\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  };\n\n  handleOnMapClicked = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  handleCenterMoved(mapProps, map) {\n    this.setState(\n      {\n        currentLocation: {\n          lat: map.center.lat(),\n          lng: map.center.lng()\n        }\n      },\n      () => {\n        this.getMapInfo();\n      }\n    );\n  }\n\n  handleLocationChange(lat, lng) {\n    this.setState(\n      {\n        currentLocation: {\n          lat: lat,\n          lng: lng\n        }\n      },\n      () => {\n        this.getMapInfo();\n      }\n    );\n  }\n\n  handleFilters = async filterArray => {\n    let paramArray = await this.getMapInfo(filterArray);\n    let filteredArray = await this.filterPlaces(filterArray, paramArray);\n    let removedArray = await this.removePlaces(filteredArray, paramArray);\n    this.filterFinal(removedArray);\n  };\n\n  getMapInfo = filterArray => {\n    var paramArray = [];\n    var locationArr = [];\n    var namesArr = [];\n    var ratingsArr = [];\n    var addressesArr = [];\n    var placeIDArr = [];\n    axios\n      .get(\n        `${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?`,\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n          },\n          params: {\n            categories: \"coffee, libraries\",\n            latitude: this.state.currentLocation.lat,\n            longitude: this.state.currentLocation.lng,\n            limit: 20\n          }\n        }\n      )\n      // set state for locations, names\n      .then(res => {\n        for (var key in res.data.businesses) {\n          var addressesBase = res.data.businesses[key].location;\n\n          locationArr.push(res.data.businesses[key].coordinates);\n          placeIDArr.push(res.data.businesses[key].id);\n          namesArr.push(res.data.businesses[key].name);\n          ratingsArr.push(res.data.businesses[key].rating);\n          addressesArr.push(\n            \"\" +\n              addressesBase.address1 +\n              \" \" +\n              addressesBase.city +\n              \", \" +\n              addressesBase.state +\n              \" \" +\n              addressesBase.zip_code\n          );\n        }\n\n        paramArray.push(placeIDArr);\n        paramArray.push(locationArr);\n        paramArray.push(namesArr);\n        paramArray.push(ratingsArr);\n        paramArray.push(addressesArr);\n      })\n\n      .catch(err => {\n        console.log(\"Yelp API call error\");\n      });\n    if (filterArray !== undefined) {\n      return new Promise((resolve, reject) => {\n        resolve(paramArray);\n      });\n    } else {\n      console.log(locationsArr);\n      this.setState({\n        placeID: placeIDArr,\n        locations: locationArr,\n        names: namesArr,\n        ratings: ratingsArr,\n        addresses: addressesArr\n      });\n    }\n  };\n\n  filterFinal = removedArray => {\n    // call another function here that applies those parameters\n\n    placeIDArr = removedArray[0];\n    locationsArr = removedArray[1];\n    namesArr = removedArray[2];\n    ratingsArr = removedArray[3];\n    addressesArr = removedArray[4];\n\n    this.setState({\n      placeID: placeIDArr,\n      locations: locationArr,\n      names: namesArr,\n      ratings: ratingsArr,\n      addresses: addressesArr\n    });\n  };\n  filterPlaces = (filterArray, paramArray) => {\n    // have viewList send the filters in an array\n    // get request to the database and put the list of placeIDs in a list that excludes those places\n    // update the state\n    const placeIDArr = paramArray[0];\n    let removeArray = [];\n    for (let i = 0; i < placeIDArr.length; i++) {\n      const getString =\n        \"http://localhost:3001/api/getDataAverage/\" + placeIDArr[i];\n      axios\n        .get(getString)\n        .then(res => {\n          let resArray = [\n            res.data.data[0].averageSeatRating,\n            res.data.data[0].averageComfortRating,\n            res.data.data[0].averageInternetRating,\n            res.data.data[0].averageNoiseRating,\n            res.data.data[0].averageOutletRating\n          ];\n          // push the indexes\n          for (let j = 0; j < resArray.length; j++) {\n            if (resArray[j] < filterArray[j]) {\n              removeArray.push(i);\n              break;\n            }\n          }\n          //  console.log(removeArray);\n          // console.log(removeArray.length);\n        })\n\n        .catch(err => {\n          console.log(err);\n        });\n    }\n    //console.log(removeArray);\n    //console.log(removeArray.length);\n\n    return new Promise((resolve, reject) => {\n      resolve(removeArray);\n    });\n  };\n\n  // remove change state array and rerender by calling setState\n  removePlaces = (removeArray, paramArray) => {\n    let placeIDCopy = paramArray[0];\n    let locationArrayCopy = paramArray[1];\n    let namesCopy = paramArray[2];\n    let ratingsCopy = paramArray[3];\n    let addressesCopy = paramArray[4];\n\n    let i = removeArray.length;\n    console.log(removeArray);\n    console.log(i);\n    while (i--) {\n      console.log(\"here\");\n      locationArrayCopy.splice(removeArray[i], 1);\n      placeIDCopy.splice(removeArray[i], 1);\n      namesCopy.splice(removeArray[i], 1);\n      ratingsCopy.splice(removeArray[i], 1);\n      addressesCopy.splice(removeArray[i], 1);\n    }\n    let returnArray = [\n      placeIDCopy,\n      locationArrayCopy,\n      namesCopy,\n      ratingsCopy,\n      addressesCopy\n    ];\n    //console.log(returnArray);\n    return new Promise((resolve, reject) => {\n      resolve(returnArray);\n    });\n  };\n\n  // have the filters as states. And pass thsoe states off to ViewList to create\n  // a call to the database\n  render() {\n    const names = this.state.names;\n    const locations = this.state.locations;\n    const addresses = this.state.addresses;\n    const ratings = this.state.ratings;\n    const activeMarker = this.state.activeMarker;\n    const showingInfoWindow = this.state.showingInfoWindow;\n    const selectedPlace = this.state.selectedPlace;\n    const placeID = this.state.placeID;\n    return (\n      <div className={\"container\"}>\n        <div id=\"title\"> Study Spots</div>\n        <div className={\"mapListContainer\"}>\n          <ViewList\n            className={\"ViewList\"}\n            id={\"listView\"}\n            names={names}\n            locations={locations}\n            addresses={addresses}\n            ratings={ratings}\n            placeID={placeID}\n            onFilter={this.handleFilters}\n          />\n\n          <MapContainer\n            className={\"mapContainer\"}\n            names={names}\n            locations={locations}\n            addresses={addresses}\n            ratings={ratings}\n            activeMarker={activeMarker}\n            showingInfoWindow={showingInfoWindow}\n            selectedPlace={selectedPlace}\n            onMapClicked={this.handleOnMapClicked}\n            onMarkerClick={this.onMarkerClick}\n            centerMoved={this.handleCenterMoved}\n            handleLocationChange={this.handleLocationChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}