{"ast":null,"code":"var _jsxFileName = \"/Users/colinkawai/mapreacdt/src/Map.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nexport class mapCompo extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, \"Loading Map...\");\n  } // the case when the map is first loaded\n  // cannot depend upon the google api being avaliable when the component is first loaded\n  // if component is loaded without it the google prop will be undefined\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n  } // this would happen whenever our map has already been loaded previously in our app\n\n\n  componentDidMount() {\n    this.loadMap();\n  } //called when there is a DOM component on the page\n  //need to grab the refrence to the DOM component\n\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef); //instantiate a google map object on our page\n\n      let zoom = 14;\n      let lat = 37.774929;\n      let lng = -122.419416;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // constructor accepts a DOM node\n      // and a configuration object to create a map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n}\n/*\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocaiton: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  //is invoked immediatley after updating occurs. Not called for initial render\n  // good place to do network requests\n  componentDidUpdate(prevProps, prevState) {\n    //need to check if the map is loaded\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    //check if browser's current location is provided\n    if (prevState.currentLocaiton !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  // instance when map is already loaded\n  // invoked immediatley after a component is mounted\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      // what is setting centerAroundCurrentLocation to true\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocaiton: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  //only called after the component has been rendered\n  //and grabs a reference from the DOM component to where we want out map to be placed\n  loadMap() {\n    if (this.props && this.props.google) {\n      // check if google is avaliable\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      //reference to the DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocaiton;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // maps.Map() is constructor that instantiates the map\n      this.maps = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocaiton\n      });\n    });\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map ...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n*/","map":{"version":3,"sources":["/Users/colinkawai/mapreacdt/src/Map.js"],"names":["React","ReactDOM","mapCompo","Component","render","componentDidUpdate","prevProps","prevState","google","props","loadMap","componentDidMount","maps","mapRef","refs","map","node","findDOMNode","zoom","lat","lng","center","LatLng","mapConfig","Object","assign","Map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AAC5CC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,GAAG,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD,GAH2C,CAI5C;AACA;AACA;;;AACAC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,QAAID,SAAS,CAACE,MAAV,KAAqB,KAAKC,KAAL,CAAWD,MAApC,EAA4C;AAC1C,WAAKE,OAAL;AACD;AACF,GAX2C,CAa5C;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKD,OAAL;AACD,GAhB2C,CAkB5C;AACA;;;AACAA,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKD,KAAL,IAAc,KAAKA,KAAL,CAAWD,MAA7B,EAAqC;AACnC;AACA,YAAM;AAAEA,QAAAA;AAAF,UAAa,KAAKC,KAAxB;AACA,YAAMG,IAAI,GAAGJ,MAAM,CAACI,IAApB;AAEA,YAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUC,GAAzB;AACA,YAAMC,IAAI,GAAGf,QAAQ,CAACgB,WAAT,CAAqBJ,MAArB,CAAb,CANmC,CAQnC;;AACA,UAAIK,IAAI,GAAG,EAAX;AACA,UAAIC,GAAG,GAAG,SAAV;AACA,UAAIC,GAAG,GAAG,CAAC,UAAX;AACA,YAAMC,MAAM,GAAG,IAAIT,IAAI,CAACU,MAAT,CAAgBH,GAAhB,EAAqBC,GAArB,CAAf;AACA,YAAMG,SAAS,GAAGC,MAAM,CAACC,MAAP,CAChB,EADgB,EAEhB;AACEJ,QAAAA,MAAM,EAAEA,MADV;AAEEH,QAAAA,IAAI,EAAEA;AAFR,OAFgB,CAAlB,CAbmC,CAoBnC;AACA;;AACA,WAAKH,GAAL,GAAW,IAAIH,IAAI,CAACc,GAAT,CAAaV,IAAb,EAAmBO,SAAnB,CAAX;AACD;AACF;;AA7C2C;AAgD9C","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nexport class mapCompo extends React.Component {\n  render() {\n    return <div ref=\"map\">Loading Map...</div>;\n  }\n  // the case when the map is first loaded\n  // cannot depend upon the google api being avaliable when the component is first loaded\n  // if component is loaded without it the google prop will be undefined\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n  }\n\n  // this would happen whenever our map has already been loaded previously in our app\n  componentDidMount() {\n    this.loadMap();\n  }\n\n  //called when there is a DOM component on the page\n  //need to grab the refrence to the DOM component\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      //instantiate a google map object on our page\n      let zoom = 14;\n      let lat = 37.774929;\n      let lng = -122.419416;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // constructor accepts a DOM node\n      // and a configuration object to create a map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n}\n\n/*\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocaiton: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  //is invoked immediatley after updating occurs. Not called for initial render\n  // good place to do network requests\n  componentDidUpdate(prevProps, prevState) {\n    //need to check if the map is loaded\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    //check if browser's current location is provided\n    if (prevState.currentLocaiton !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  // instance when map is already loaded\n  // invoked immediatley after a component is mounted\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      // what is setting centerAroundCurrentLocation to true\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocaiton: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  //only called after the component has been rendered\n  //and grabs a reference from the DOM component to where we want out map to be placed\n  loadMap() {\n    if (this.props && this.props.google) {\n      // check if google is avaliable\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      //reference to the DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocaiton;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // maps.Map() is constructor that instantiates the map\n      this.maps = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocaiton\n      });\n    });\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map ...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n*/\n"]},"metadata":{},"sourceType":"module"}